/* -*-c++-*- */

// configuration file for some simple mathematical functions

/**
 * Defines some simple mathematical functions.
 *
 * This description will go into the header file spi_math.hpp. All files
 * generated by SPI will start with the name spi_
 */
%module math;

#include <math.h>
#include <ql/math/matrix.hpp>

{
#include <ql/math/matrix.hpp>

QuantLib::Matrix ToQLMatrix(const spi::MatrixData<double>& m);
spi::MatrixData<double> FromQLMatrix(const QuantLib::Matrix& qm);
}

/**
 * Adds two numbers together.
 *
 * This description will go into the header file and also into the tex
 * file for this function. Each function gets its own tex file.
 */
extern double Add(
    /** First number to be summed. */
    double x,
    /** Second number to be summed. */
    double y)
{
    return x+y;
}

/**
 * Defines a binary operation.
 */
enum BinaryOperator
{
    Add,
    Subtract,
    Multiply,
    Divide,
    Power
};

/**
 * Binary operation on two numbers.
 */
extern double BinaryOp(
    double x,
    BinaryOperator op,
    double y)
{
    const char routine[] = "BinaryOp";

    switch(op)
    {
    case BinaryOperator::Add:
        return x+y;
    case BinaryOperator::Subtract:
        return x-y;
    case BinaryOperator::Multiply:
        return x*y;
    case BinaryOperator::Divide:
        return x/y;
    case BinaryOperator::Power:
        return pow(x,y);
    }

    throw spi::RuntimeError("%s: Unsupported binary operation %d",
                            routine, (int)op);
}


class Matrix<open shared QuantLib::Matrix>
{
    public double[][] data
    {
        return FromQLMatrix(*self);
    }
}
{
    return boost::shared_ptr<QuantLib::Matrix>(new QuantLib::Matrix(ToQLMatrix(data)));
}

{
QuantLib::Matrix ToQLMatrix(const spi::MatrixData<double>& m)
{
    size_t nr = m.Rows();
    size_t nc = m.Cols();
    QuantLib::Matrix qm(nr,nc);   
    for(size_t i = 0; i < nr; ++i)
    {
        for (size_t j = 0; j < nc; ++j)
        {
            qm[i][j] = m[i][j];
        }
    }
    return qm;
}

spi::MatrixData<double> FromQLMatrix(const QuantLib::Matrix& qm)
{
    size_t nr = qm.rows();
    size_t nc = qm.columns();
    spi::MatrixData<double> m(nr, nc);   
    for(size_t i = 0; i < nr; ++i)
    {
        for (size_t j = 0; j < nc; ++j)
        {
            m[i][j] = qm[i][j];
        }
    }
    return m;
}
}

// test that we can do matrix operations without actually
// having a Matrix object
extern double Determinant(double[][] matrix)
{
    QuantLib::Matrix qm = ToQLMatrix(matrix);
    return QuantLib::determinant(qm);
}

extern double[][] MatrixMultiply(
    double[][] m1,
    double[][] m2)
{
    QuantLib::Matrix qm1 = ToQLMatrix(m1);
    QuantLib::Matrix qm2 = ToQLMatrix(m2);
    QuantLib::Matrix qm = qm1 * qm2;
    return FromQLMatrix(qm);
}

/* -*-c++-*- */

// In these examples, C++ comments will explain the features of SPCL.
//
// Doxygen-style comments will appear in the user guide, public C++ headers,
// Excel function help etc.
//
// Doxygen-style comments are /** ... */ before the item being described

/**
 * Rates library.
 *
 * At present the functionality is extremely limited - we define our
 * own date type, we define a wrapper on the isda-cds day count convention
 * (which is represented as an integer), and we have a ZeroCurve with
 * a discount function.
 */

%module dates;

// these header files are used in the implementation
// they are not visible to the client

#include <ql/time/date.hpp>

// somewhere at the start of the project you need to define how you
// represent dates in your library
//
// this is done via the typedef keyword

/**
 * Defines the Date class.
 */
typedef date Date <QuantLib::Date>
    innerHeader="<ql/time/date.hpp>" noDoc=True
{
    convert_in(date)
    {
        long dt = (long)date;
        if (dt > 109205)
        {
            return QuantLib::Date(dt - 109205);
        }
        throw spi::RuntimeError("Cannot convert %s to QuantLibDate",
                                std::string(date).c_str());
    }

    convert_out(date)
    {
        return spi::Date((long)(date.serialNumber() + 109205));
    }
};

/**
 * Tests that the QuantLib date format gives the correct date.
 * We do this by using QuantLib's own date serialisation methods.
 */
extern string DateToString(Date date)
{
    std::ostringstream ostr;
    ostr << date;
    return ostr.str();
}


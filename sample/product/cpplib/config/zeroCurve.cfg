/* -*-c++-*- */

%module zeroCurve;

#include <rates/ZeroCurve.hpp>
#include <rates/Swaps.hpp>
#include <cpplib-spi/MapConvert.hpp>

/**
 * Interpolation type for extracting rates from curves.
 */
enum InterpType<CZeroCurve::EInterpType> innerHeader="<rates/ZeroCurve.hpp>"
{
    /** Linear interpolation. */
    LINEAR_INTERP = CZeroCurve::LINEAR,
    /** Flat forwards interpolation. */
    FLAT_FORWARDS = CZeroCurve::FLAT_FORWARDS
};

class virtual ZeroCurve<open shared cached const IZeroCurve>
{
    extern double PV(
        Date interpDate) const;

    extern double FV(
        Date startDate,
        Date endDate) const
    {
        double startDiscount = PV(self, startDate);
        double endDiscount = PV(self, endDate);

        return endDiscount / startDiscount;
    }
};

class ZeroCurveRates<open shared cached const CZeroCurve> : ZeroCurve
{
    public Date baseDate
    {
        return self->BaseDate();
    }

    property int numItems
    {
        return self->Dates().size();
    }

    public InterpType interpType
    {
        return self->InterpType();
    }

    public Date[] dates
    {
        return self->Dates();
    }

    public double[] rates
    {
        return self->Rates();
    }
    
    public RateType rateType
    {
        return new CRateType(self->RateType());
    }

    public DayCountConv dayCount
    {
        return self->DayCount();
    }

    extern double ZeroRate(
        Date interpDate) const;

}
{
    return Share(new CZeroCurve(baseDate, interpType, dates, rates, *rateType, dayCount));
}

class ZeroCurveProduct<open shared cached const CZeroCurveProduct> : ZeroCurve
    noMake=True
{
    public Date baseDate
    {
        return self->BaseDate();
    }

    public ZeroCurve zc1
    {
        return self->ZC1();
    }

    public ZeroCurve zc2
    {
        return self->ZC2();
    }

    public double baseDateDiscount = 1.0 canHide=True
    {
        return self->BaseDateDiscount();
    }

    static ZeroCurveProduct Make(
        Date baseDate,
        ZeroCurve zc1,
        ZeroCurve zc2)
        noConvert=True
    {
        return ZeroCurveProduct::Make(baseDate, zc1, zc2, 0.0);
    }
};

/**
 * Generates a sample zero curve out to 10 years with slope and some extra
 * shape which goes up and decays to zero.
 *
 * Not to be used for pricing - simply a device to get example curves
 * with a bit of shape.
 */
extern ZeroCurveRates ZeroCurveSample(
    Date       baseDate,
    double     baseRate,
    double     slope,
    double     hump=0.0,
    InterpType interpType)
{
    const std::vector<std::string>& intervals = spi::StringSplit(
        "1M,3M,6M,1Y,2Y,3Y,4Y,5Y,7Y,10Y", ',');
    static double slopeRates[] = {
        0.0, 0.1, 0.2, 0.3, 0.5, 0.66, 0.76, 0.84, 0.94, 1.0};
    static double humpRates[] =  {
        0.0, 0.3, 0.5, 0.8, 1.0, 1.0, 0.9, 0.8, 0.5, 0.0};

    SPI_PRE_CONDITION(sizeof(slopeRates) == sizeof(double) * intervals.size());
    SPI_PRE_CONDITION(sizeof(humpRates) == sizeof(double) * intervals.size());

    std::vector<CDate> dates;
    std::vector<double> rates;

    for (size_t i = 0; i < intervals.size(); ++i)
    {
        CDateInterval ivl(intervals[i]);

        CDate date = ivl.AddToDate(baseDate);

        double rate = baseRate + (slope * slopeRates[i] + hump * humpRates[i]) / 100.0;

        dates.push_back(date);
        rates.push_back(rate);
    }

    return Share(new CZeroCurve(
        baseDate, interpType, dates, rates, CRateType::ANNUAL, CDayCount::ACT_365F));
}

extern double ForwardRate(
    ZeroCurve zc,
    Date startDate,
    Date maturityDate,
    DayCountConv dcc,
    RateType basis)
{
    return ::ForwardRate(zc, startDate, maturityDate, dcc, *basis);
}

extern double MMRate(
    ZeroCurve zc,
    Date startDate,
    Date maturityDate,
    DayCountConv dcc)
{
    return ::ForwardRate(zc, startDate, maturityDate, dcc, CRateType::SIMPLE);
}

extern double SwapRate(
    ZeroCurve zc,
    Date startDate,
    DateInterval couponInterval,
    Date maturityDate,
    DayCountConv dcc,
    BadDayConv accBadDayConv,
    BadDayConv payBadDayConv,
    Holidays holidays,
    bool stubAtEnd=false)
{
    return ::SwapRate(zc, startDate, couponInterval, maturityDate,
        dcc, accBadDayConv, payBadDayConv, holidays, stubAtEnd);
}

extern Map SwapAnalytics(
    bool getParFlows=False,
    double couponRate,
    Date startDate,
    DateInterval couponInterval,
    Date maturityDate,
    DayCountConv dcc,
    BadDayConv accBadDayConv,
    BadDayConv payBadDayConv,
    Holidays holidays,
    ZeroCurve zc,
    bool stubAtEnd=false)
{
    CMapConstSP results = ::SwapAnalytics(
        getParFlows, couponRate, startDate, couponInterval,
        maturityDate, dcc, accBadDayConv, payBadDayConv,
        holidays, zc, stubAtEnd);

    return CMapToMap(results);
}

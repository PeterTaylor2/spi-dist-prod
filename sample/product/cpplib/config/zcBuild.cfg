/* -*-c++-*- */

%module zcBuild;

#include <rates/ZCBuild.hpp>
#include <utils/RuntimeError.hpp>

#include "cpplib_zeroCurve.hpp" // needed for MMRate and SwapRate

extern ZeroCurveRates ZeroCurveCash(
    Date         baseDate,
    Date[]       dates,
    double[]     rates,
    DayCountConv dayCountConv,
    InterpType   interpType)
{
    return ::ZeroCurveCash(baseDate, dates, rates, dayCountConv, interpType);
}

/*
 * Builds a zero curve from swap rates assuming that we can use the swap
 * curve to discount the payments and that the floating leg values to par.
 */
extern ZeroCurveRates ZeroCurveSwaps(
    ZeroCurveRates stubCurve,
    Date[]         swapDates,
    double[]       swapRates,
    DateInterval   couponInterval,
    DayCountConv   fixedDcc,
    BadDayConv     badDayConv,
    Holidays       holidays)
{
    return ::ZeroCurveSwaps(stubCurve, swapDates, swapRates, couponInterval,
        fixedDcc, badDayConv, holidays);
}

enum CashOrSwap
{
    IGNORE
    "Ignore" "I" "",
    CASH
    "Cash" "C",
    SWAP
    "Swap" "S"
};

/*
 * Builds a zero curve from cash and swap rates assuming that we can use the
 * swap curve to discount the payments and that the floating leg values to par.
 */
extern ZeroCurveRates ZeroCurveCashSwaps(
    Date         baseDate,
    CashOrSwap[] cashOrSwaps="",
    Date[]       dates?,
    double[]     rates=0,
    DayCountConv cashDcc,
    InterpType   interpType,
    DateInterval swapFixedInterval,
    DayCountConv swapFixedDcc,
    BadDayConv   badDayConv,
    Holidays     holidays)
{
    PRE_CONDITION(cashOrSwaps.size() == dates.size());
    PRE_CONDITION(cashOrSwaps.size() == rates.size());

    std::vector<CDate>  cashDates;
    std::vector<double> cashRates;
    std::vector<CDate>  swapDates;
    std::vector<double> swapRates;

    size_t numPoints = cashOrSwaps.size();
    for (size_t i = 0; i < numPoints; ++i)
    {
        switch(cashOrSwaps[i])
        {
        case CashOrSwap::CASH:
            cashDates.push_back(dates[i]);
            cashRates.push_back(rates[i]);
            break;
        case CashOrSwap::SWAP:
            swapDates.push_back(dates[i]);
            swapRates.push_back(rates[i]);
            break;
        case CashOrSwap::IGNORE:
            break;
        default:
            THROW_RUNTIME_ERROR("Unsupported cashOrSwap type");
        }
    }
    
    CZeroCurveConstSP cashCurve = ::ZeroCurveCash(
        baseDate, cashDates, cashRates, cashDcc, interpType);

    CZeroCurveConstSP swapCurve = ::ZeroCurveSwaps(
        cashCurve, swapDates, swapRates, swapFixedInterval, swapFixedDcc,
        badDayConv, holidays);

    return swapCurve;
}

extern double MarketRate(
    ZeroCurve    zc,
    CashOrSwap   cashOrSwap,
    Date         startDate,
    Date         maturityDate,
    DayCountConv cashDcc,
    DateInterval swapFixedInterval,
    DayCountConv swapFixedDcc,
    BadDayConv   accBadDayConv,
    BadDayConv   payBadDayConv,
    Holidays     holidays,
    bool         stubAtEnd=false)

    noConvert=True
{
    switch(cashOrSwap)
    {
    case CashOrSwap::CASH:
        return MMRate(zc, startDate, maturityDate, cashDcc);
    case CashOrSwap::SWAP:
        return SwapRate(zc, startDate, swapFixedInterval, maturityDate, 
            swapFixedDcc, accBadDayConv, payBadDayConv, holidays, stubAtEnd);
    default:
        THROW_RUNTIME_ERROR("Unsupported cashOrSwap type" <<
            cashOrSwap.to_string());
    }
}


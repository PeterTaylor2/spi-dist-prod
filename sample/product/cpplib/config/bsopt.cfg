/* -*-c++-*- */

/**
 * Black-Scholes style options functionality.
 */

%module bsopt;

#include <maths/OptionDist.hpp>
#include <utils/RuntimeError.hpp>
#include <math.h>

enum SensType
{
    PREMIUM "Premium" "P",
    DELTA   "Delta" "D"
};

enum CallOrPut<ECallOrPut> typedef = "enum : char"
{
    CALL=OPTION_CALL "Call" "C",
    PUT=OPTION_PUT   "Put" "P"
};

extern double OptionLognormalSens(
    CallOrPut callOrPut,
    double fwd,
    double strike,
    double yrs2Exp,
    double yrs2Pymt,
    double vol,
    SensType sensType)
{
    COptionLognormal dist(vol);

    switch(sensType)
    {
    case SensType::PREMIUM:
    {
        double premium = dist.Premium(callOrPut, fwd, yrs2Exp, strike);
        return premium;
    }
    case SensType::DELTA:
    {
        double delta = dist.Delta(callOrPut, fwd, yrs2Exp, strike);
        return delta;
    }
    default:
        THROW_RUNTIME_ERROR("PROGRAM_BUG");
    }
}


extern double OptionNormalSens(
    CallOrPut callOrPut,
    double fwd,
    double strike,
    double yrs2Exp,
    double yrs2Pymt,
    double vol,
    SensType sensType)
{
    COptionNormal dist(vol);

    switch(sensType)
    {
    case SensType::PREMIUM:
    {
        double premium = dist.Premium(callOrPut, fwd, yrs2Exp, strike);
        return premium;
    }
    case SensType::DELTA:
    {
        double delta = dist.Delta(callOrPut, fwd, yrs2Exp, strike);
        return delta;
    }
    default:
        THROW_RUNTIME_ERROR("PROGRAM_BUG");
    }

}

extern double OptionLognormalVol(
    CallOrPut callOrPut,
    double fwd,
    double strike,
    double yrs2Exp,
    double volGuess,
    double fwdPremium)
{
    double impliedVol = COptionLognormal(volGuess).ImpliedVolatility(
        callOrPut, fwd, yrs2Exp, strike, fwdPremium);

    return impliedVol;
}


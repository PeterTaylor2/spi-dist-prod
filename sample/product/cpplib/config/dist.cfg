/* -*-c++-*- */

/**
 * Defines various basic mathematical distribution functions.
 */

%module dist namespace = Dist;

#include <maths/NormDist.hpp>
#include <maths/OptionDist.hpp>

/**
 * This function calculates the standard normal probability density function. 
 *
 * A standard normal variable has zero mean and unit variance.
 */
extern double NormalDensity(double x)
{
    return NormDist::PHI(x);
}

/**
 * This function calculates a cumulative probability for the standard normal 
 * probability density function. 
 *
 * This is the probability that the normal variable is less than the upper 
 * limit z. The normal variable is assumed to be standard, with zero
 * mean and unit variance.
 */
extern double NormalCumProb(double x)
{
    return NormDist::CND(x);
}

/**
 * This function calculates the inverse of the cumulative normal distribution.
 *
 * The cumulative normal distribution is the probability that the variable is
 * less than some number, z. 
 *
 * The normal distribution is assumed to be standard, with zero  mean and unit
 * variance.
 */
extern double NormalCumInv(double prob)
{
    return NormDist::CND_INVERSE(prob);
}

/**
 * This function calculates a cumulative probability over the bi-variate normal
 * probability density function. 
 *
 * This is the probability that normal variable1 will be less than limit1 and 
 * normal variable2 will be less than limit2. 
 *
 * The marginal normal distributions are assumed to be standard, with zero
 * mean and unit variance. The variables variable1 and variable2
 * are assumed to be correlated with correlation rho.
 */

extern double NormalBiCumProb(double z1, double z2, double rho)
{
    return NormDist::CBND(z1, z2, rho);
}


class virtual OptionDist<open const shared COptionDist>
{
    extern double Premium(CallOrPut callOrPut, double fwd, double expiry, double strike);
    extern double Delta(CallOrPut callOrPut, double fwd, double expiry, double strike);
};

class OptionLognormal<open const shared COptionLognormal> : OptionDist
{
    public double vol { return self->Volatility(); }
};

class OptionNormal<open const shared COptionNormal> : OptionDist
{
    public double vol { return self->Volatility(); }
};


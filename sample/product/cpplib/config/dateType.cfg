/* -*-c++-*- */

// Defines the date type.
//
// SPI has its own representation of dates (spi::Date) but it is unlikely that
// you will be using this representation in your own library.
//
// Hence we need to convert between the outer type (spi::Date) and the inner
// type (in this case TDate which is typedef long).
//
// Note that spi::Date is implemented as an offset from some base date, and
// the same base date is used by TDate.
//
// Hence the translation code is very simple.

%module dateType;

//{
//#include <utils/Results.hpp>
//
//spi::MapSP ConvertResultsMap(const CMapConstSP& results);
//}

// somewhere at the start of the project you need to define how you
// represent dates in your library
//
// this is done via the typedef keyword
//
// the syntax of typedef is as follows:
//
// typedef builtin_type outer_type_name <inner_type_name>
//   [innerHeader=] [noDoc=]
// {
//     convert_in(builtin_type_value)
//     {
//         conversion_code returning inner_type_value
//     }
//
//     convert_out(inner_type_value)
//     {
//         conversion_code returning builtin_type_value
//     }
// };
//
// innerHeader is the name of a header file which defines the inner_type
// this is used internally but is not visible to the end user of the C++
// product DLL
//
// noDoc=True indicates that the newly defined type will not appear in the
// user guide - instead any references in the user guide will be to the
// builtin type
//
// you can use typedef for even simpler translations and validations and
// you might not even need to define an inner_type_name
//
// for example: typedef double Correlation with only convert_in defined
// the convert_in routine could validation that the correlation was in the
// range [-1,1] and return the input value in that case - no convert_out
// routine is necessary
//
// for example: typedef double BasisPoints could simply scale the input
// value down by 10,000 and multiply the output value by 10,000

/**
 * Defines the Date class.
 */
typedef date Date <CDate>
    typedef = "class" noDoc=True
{
    convert_in(date)
    {
        return CDate((int)date);
    }

    convert_out(date)
    {
        return spi::Date((int)date);
    }
};



/**
 * Constructs a date from year, month and day using the Gregorian calendar.
 *
 * Validates that the combination is valid.
 */
extern Date Date(
    /** Year A.D. - usually with 4 digits */
    int year, 
    /** Month - 1 = January, 12 = December etc. */
    int month,
    /** Day of the month, from 1 to 31. It is an error to use a number more
        than the days in the particular month. */
    int day) noLog=True
{
    return CDate(year, month, day);
}


//{
//spi::MapSP ConvertResultsMap(const CMapConstSP& results)
//{
//    const std::vector<std::string>& names = results->Names();
//    spi::MapSP out(new spi::Map(""));
//    for (size_t i = 0; i < names.size(); ++i)
//    {
//        const std::string& name = names[i];
//        const CValue& value = results->Item(name);
//
//        switch(value.GetType())
//        {
//        case CValue::Double:
//            out->SetValue(name, value.GetDouble());
//            break;
//        case CValue::Integer:
//            out->SetValue(name, value.GetInt());
//            break;
//        case CValue::Date:
//            out->SetValue(name, Date_convert_out(value.GetDate()));
//            break;
//        case CValue::String:
//            out->SetValue(name, value.GetString());
//            break;
//        case CValue::Bool:
//            out->SetValue(name, value.GetBool());
//            break;
//        default:
//            // ignore for the time being
//            break;
//        }
//    }
//    return out;
//}
//
//}


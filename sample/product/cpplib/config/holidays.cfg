/* -*-c++-*- */

/**
 * Defines some basic holiday functionality.
 */

%module holidays;

#include <utils/Holidays.hpp>
#include <utils/DateIntervalAdjust.hpp>
#include <utils/DateOrInterval.hpp>

/**
 * Bad day convention.
 *
 * This is used to determine rules for adjusting bad days (holidays and
 * weekends) to good days (working days).
 */
enum BadDayConv<EBadDayConv>
{
    FOLLOW = CPPLIB_BAD_DAY_FOLLOW     "Follow" "F",
    PREVIOUS = CPPLIB_BAD_DAY_PREVIOUS "Previous" "P",
    NONE = CPPLIB_BAD_DAY_NONE         "None" "N",
    MODIFIED = CPPLIB_BAD_DAY_MODIFIED "ModifiedFollow" "M"
};

/**
 * Holidays in the system are represented by strings.
 *
 * The string either represents a filename (which we read once only for efficiency), or
 * a holiday name created directly, or NONE (no holidays, weekends are not working days), or
 * No_Weekends (no holidays, weekends are working days).
 */
typedef string Holidays <std::string>
{
    convert_in(str)
    {
        return str;
    }

    convert_out(str)
    {
        return str;
    }
};


//extern string HolidaysCombine(
//    Holidays holidayNames[],
//    Holidays newName)
//{
//    SPI_NOT_IMPLEMENTED;
//}

extern Date[] HolidaysGetDates(
    Holidays holidays)
{
    CHolidayListSP hl = HolidayListFromCache(holidays);
    return hl->DateList();
}

/**
 * This function loads a holiday file into memory.
 * This is particularly useful if the holiday file has changed on the disk.
 */
extern int HolidaysLoadFile(
    Holidays fileName)
{
    HolidayLoadFromDisk(fileName, fileName);
    return 0;
}

//extern int HolidaysSetDates(
//    Holidays name,
//    Date     dates[])
//{
//    SPI_NOT_IMPLEMENTED;
//
//    // it seems we would need to create the THolidayList using
//    // JpmcdsHolidayListNewGeneral and then call JpmcdsHolidayListAddToCache
//}

extern bool IsBusinessDay(
    Date     date,
    Holidays holidays)
{
    return ::IsBusinessDay(date, holidays);
}

extern bool IsHoliday(
    Date     date,
    Holidays holidays)
{
    bool excludeWeekends = true; // for compatibility with ISDA/CDS-based CLIB
    return ::IsHoliday(date, holidays, excludeWeekends);
}

extern bool IsWeekend(Date date)
{
    return ::IsWeekend(date);
}

/**
*************************************************************************
** Calculates the number of business days between two dates (FROM & TO).
**
** Algorithm:
** 1. if FROM = TO, the result is 0
** 2. if FROM < TO, the result is the number of business days in the CLOSED
**    interval of [FROM+1,TO]
** 3. if FROM > TO, the result is negated number of business days in the
**    CLOSED interval of [TO,FROM-1]
***************************************************************************
*/
extern int BusDaysDiff(
    Date     fromDate,
    Date     toDate,
    Holidays holidays)
{
    return ::BusinessDaysDiff(fromDate, toDate, holidays);
}

extern Date BusinessDay
(Date       date,
 BadDayConv method,
 Holidays   holidays)
{
    return ::BusinessDay(date, method, holidays);
}

extern Date AddBusDays
(Date     startDate,
 int      offset,
 Holidays holidays)
{
    return ::AddBusinessDays(startDate, offset, holidays);
}

/**
 * Returns the last business day in the month of the given date
 */
extern Date BusinessEOM
(   
    /** Date which defines the current month */
    Date       date,
    /** Name of the holiday file which defines which days are holidays */
    Holidays   holidays)
{
    return ::BusinessEndOfMonth(date, holidays);
}

/**
 * Adds a number of date intervals to a given date and then adjusts
 * the result so that it is a good business day.
 */
extern Date DateFwdBus(
    /** Start date. */
    Date startDate,
    /** Number of intervals to move. */
    int numIntervals,
    /** Date interval to move. */
    DateInterval ivl,
    /** Bad day convention. */
    BadDayConv badDayMethod,
    /** Holiday file. */
    Holidays holidays)
{
    return DateFwdThenAdjust(startDate, ivl, badDayMethod, holidays, numIntervals);
}

class virtual DateOrInterval<open shared const CDateOrInterval>
{
    DateOrInterval(Date date)
    {
        return DateOrIntervalDate::Make(date, BadDayConv::NONE);
    }

    DateOrInterval(string str)
    {
        return DateOrIntervalInterval::Coerce(str);
    }
};

class DateOrIntervalDate<open shared const CDateOrIntervalDate> : DateOrInterval
{
    public Date date
    {
        return self->Date();
    }

    public BadDayConv badDayConv
    {
        return self->BadDayConv();
    }

    as_value()
    {
        if (badDayConv() == BadDayConv::NONE)
            return spi::Value(date());
        return spi::Value();
    }
};

/**
 * Date adjustment type - business, calendar or weekday.
 */
enum IntervalAdjType<EDateAdjType>
{
    CALENDAR = CPPLIB_DATE_ADJ_TYPE_CALENDAR "Calendar" "C",
    BUSINESS = CPPLIB_DATE_ADJ_TYPE_BUSINESS "Business" "B",
    WEEKDAY = CPPLIB_DATE_ADJ_TYPE_WEEKDAY "Weekday" "W"
};

class DateOrIntervalInterval<open shared const CDateOrIntervalInterval> : DateOrInterval asValue=True
{
    public DateInterval ivl
    {
        return self->Interval();
    }

    public BadDayConv badDayConv
    {
        return self->BadDayConv();
    }

    public IntervalAdjType adjType
    {
        return self->AdjType();
    }

    as_value()
    {
        return spi::Value(get_inner()->ToString());
    }

    DateOrIntervalInterval(string str)
    {
        return DateOrIntervalInterval::Wrap(CDateOrIntervalInterval::Make(str));
    }

}
{
    return Share(new CDateOrIntervalInterval(ivl, badDayConv, adjType));
}

extern Date DateFwdAdj(
    Date startDate,
    int days,
    IntervalAdjType adjType,
    Holidays holidays)
{
    CDateInterval ivl(days, CDateInterval::DAY);
    return ::DateFwdAdjust(
        startDate, ivl, adjType, CPPLIB_BAD_DAY_NONE, holidays);
}

extern Date DOIEndDate(Date startDate, DateOrInterval doi, Holidays holidays) 
{
    return doi->EndDate(startDate, holidays);
}


/* -*-c++-*- */

%module dates;

// these header files are used in the implementation
// they are not visible to the client

#include <time.h>
#include <utils/DayCount.hpp>
#include <utils/DateList.hpp>

/**
 * Returns the clock time since the start of execution.
 *
 * For Excel this function is volatile (which means that whenever you
 * re-calculate the sheet the function will be re-calculated even though
 * it has no dependencies) and hidden (which means it doesn't appear in
 * the function wizard).
 */
extern double ClockTime() excelOptions="volatile;hidden" noLog=True
{
    double clockTime = (double)clock() / CLOCKS_PER_SEC;
    return clockTime;
}

enum Weekday <EWeekday> typedef = "enum : char"
{
    MONDAY = MONDAY         "Monday"    "Mon",
    TUESDAY = TUESDAY       "Tuesday"   "Tue",
    WEDNESDAY = WEDNESDAY   "Wednesday" "Wed",
    THURSDAY = THURSDAY     "Thursday"  "Thu",
    FRIDAY = FRIDAY         "Friday"    "Fri",
    SATURDAY = SATURDAY     "Saturday"  "Sat",
    SUNDAY = SUNDAY         "Sunday"    "Sun"
};

/**
 * Returns the day of the week as a number from 0 to 6, 0=Sunday, 1=Monday etc.
 */
extern Weekday DayOfWeek(
    /** Date for which we are calculating the day of the week. */
    Date date)
{
    return date.Weekday();
}

/**
 * Returns the number of days in the month as a number from 1 to 31 using the
 * Gregorian calendar.
 *
 * We also require the year in case we are in a leap year and the month is February.
 */
extern int DaysInMonth(
    /** Year A.D. - typically 4 digits */
    int year, 
    /** Month from 1 to 12. 1=January, 12=December etc */
    int month)
{
    return ::LastDayInMonth(year, month);
}

/**
 * Returns the last day of the month
 */
extern void DateToEOM(
    /** The date for which we are calculating the last day of the month */
    Date date, 
    /** The last day of the month as output */
    Date& eom) noLog=true
{
    eom = date.EndOfMonth();
}

// this is to test the alternative format for outputs...
extern void YMD(Date date, int& year, int& month, int& day) noLog=True
{
    date.YMD(&year, &month, &day);
}

// this is to test the alternative format for outputs...
extern void Year(Date date, int& year)
{
    year = date.Year();
}

// this is to test the alternative format for outputs...
extern void StartOfYear(int year, Date& startOfYear)
{
    startOfYear = CDate(year, 1, 1);
}

// this is to test alternative format for outputs...
extern void StartOfMonths(int year, Date[]& startOfMonths)
{
    startOfMonths.clear();
    for (int i = 1; i <= 12; ++i)
        startOfMonths.push_back(CDate(year, i, 1));
}

class virtual DayCountConv<open shared const CDayCount> objectName="DCC"
{
    DayCountConv(string name)
    {
        return Wrap(CDayCount::FromString(name));
    }

    //extern double Time(Date startDate, Date endDate) const;
    //extern int Days(Date startDate, Date endDate) const;
};

// in general we won't have functions which use DayCountStandard
// as a parameter - they will all be using DayCountConv
// 
// thus we don't need to provide coercion for DayCountStandard
class DayCountStandard<open shared const CDayCountStandard> : DayCountConv
{
    public string name
    {
        return self->Name();
    }

    as_value()
    {
        return name();
    }
}
{
    return CDayCountStandard::Make(name);
}


/**
 * Computes the day count fraction as a number of years between two
 * dates using a day count convention.
 */
extern double DayCountFraction(
    /** Start date. */
    Date startDate,
    /** End date. */
    Date endDate,
    /** Day count convention. */
    DayCountConv dcc)
{
    return dcc->Time(startDate, endDate);
}

/**
 * Computes the number of days difference between two dates using a day
 * count convention.
 */
extern int DaysDiff(
    /** Start date. */
    Date startDate,
    /** End date. */
    Date endDate,
    /** Day count convention. */
    DayCountConv dcc)
{
    return dcc->Days(startDate, endDate);
}

enum PeriodType<CDateInterval::EPeriodType> innerHeader="<utils/DateInterval.hpp>"
{
    DAY = CDateInterval::DAY "D",

    WEEK = CDateInterval::WEEK "W",

    MONTH = CDateInterval::MONTH "M",

    YEAR = CDateInterval::YEAR "Y",

    IMM_MONTH = CDateInterval::IMM_MONTH "J",

    IMM_QUARTER = CDateInterval::IMM_QUARTER "I",

    MONTH_EOM = CDateInterval::MONTH_EOM "F"
};

class DateInterval<open const CDateInterval&>
{
    DateInterval(string name)
    {
        return DateInterval::Make(name);
    }

    public string name
    {
        return self.ToString();
    }

    property int periods
    {
        return self.NumPeriods();
    }

    property PeriodType units
    {
        return self.PeriodType();
    }

    static DateInterval Make(
        int numPeriods,
        PeriodType periodType)
    {
        return CDateInterval(numPeriods, periodType);
    }
};


/**
 * Converts a date interval into a frequency of payments per year.
 *
 * For example a date interval of 1M would correspond to 12 payments per year.
 */
extern double DateIntervalFreq(DateInterval interval)
{
    return interval.Frequency();
}

/**
 * Converts a date interval into a number of years.
 *
 * For a daily interval (e.g. 1D, 1W) this will be the number of days divided
 * by 365.
 * For a monthly interval (e.g. 1M, 1Y, 2Y) this will be the number of months
 * divided by 12.
 *
 * For example, 1M would give the answer 1/12 and 1W would give the answer 7/365.
 */
extern double DateIntervalYears(DateInterval interval)
{
    return interval.Years();
}

/**
 * Adds a date interval to a given date.
 */
extern Date AddDateInterval(
    /** Start date. */
    Date startDate,
    /** Date interval to add. */
    DateInterval ivl,
    /** Number of intervals to add (default = 1) */
    int count=1)
{
    return ivl.AddToDate(startDate, count);
}

class DateList<open shared const CDateList>
{
    property int numItems { return self->NumItems(); }
    public Date[] dates
    {
        return self->Dates();
    }
};

extern DateList DateListMerge(
    DateList dateList1?,
    DateList dateList2?)
{
    return CDateList::Merge(dateList1, dateList2);
}


/* -*-c++-*- */

%module rates;

#include <rates/RateType.hpp>

/**
 * Defines the type of the rate.
 *
 * This can be a compound rate with a number of compounding periods per
 * year, or a continuously compounded rate, or a simple rate.
 */
class RateType<open struct CRateType>
{
    /**
     * Automatically converts an integer to a rate type.
     *
     * 1,2,4,12,365 = number of periods per year.
     * 0 = simple rate (1/(1+rt)).
     * 5000 = continuous basis.
     * 512 = discount rate (1-rt).
     * -2 = discount factor.
     */
    RateType(int number)
    {
        return RateType::Make(number);
    }

    RateType(string name)
    {
        return RateType::Wrap(new CRateType(name));
    }

    public int number
    {
        return self->number;
    }

    property string name
    {
        return self->Name();
    }

    as_value()
    {
        return name();
    }

    static RateType Make(string name)
        noConvert=True
        noLog=True
    {
        return RateType::Coerce(name);
    }
};

/**
 * Converts a rate to a discount factor using a day count conventions
 * and rate type.
 */
extern double RateToDiscount(
    /** The rate, e.g. 0.03 = 3% */
    double       rate,
    /** The start date for the rate */
    Date         startDate,
    /** The maturity date for the rate */
    Date         maturityDate,
    /** The day count convention for the rate */
    DayCountConv     dayCount,
    /** The type of the rate, e.g. simple, compound etc */
    RateType     rateType)
{
    return ::RateToDiscount(rate, startDate, maturityDate, dayCount, *rateType);
}

/**
 * Converts a discount factor to a rate using day count convention
 * and rate type.
 */
extern double DiscountToRate(
    /** The discount factor */
    double       discount,
    /** The start date for the requested rate */
    Date         startDate,
    /** The maturity date for the requested rate */
    Date         maturityDate,
    /** The day count convention for the requested rate */
    DayCountConv     dayCount,
    /** The type of the requested rate, e.g. simple, compound etc */
    RateType     rateType)
{
    return ::DiscountToRate(discount, startDate, maturityDate, dayCount, *rateType);
}


/* -*-c++-*- */

%module version;

#include <math.h>
#include <spi/Version.hpp>
#include <spi/StringUtil.hpp>

// functions are defined as extern, and the implementation follows
// the function declaration
//
// the implementation is written using the variables in the inner
// context
//
// each variable has an inner context and an outer context
// the outer context is what the client application will see
// the inner context is what the inner library understands
//
// the generated code is responsible for translating all the types
// that need translating before you get to the point where the
// code fragment is executed
//
// when debugging you should be able to put a break point in the
// code fragment in the configuration file

/**
 * Shows the version number as a string. You can request details of the build as well.
 */
extern string Version(
    /** Show build details as well as just the version number */
    bool showDetails=true)
{
    std::string versionString;
    if (showDetails)
    {
        versionString = spi::StringFormat(
            "CPPLIB version %s (%s). Built at %s %s",
            cpplib_version(),
#ifdef CPPLIB_DEBUG
            "Debug",
#else
            "Release",
#endif
            __TIME__, __DATE__);
    }
    else
    {
        versionString = cpplib_version();
    }
    return versionString;
}


// This is just for one file of the build, so for this to be accurate you 
// will need to have done a full re-build!
/**
 * Shows the timestamp of the build. 
 */
extern string Timestamp()
{
    std::string ts = spi::StringFormat("Built at %s %s", __TIME__, __DATE__);
    return ts;
}


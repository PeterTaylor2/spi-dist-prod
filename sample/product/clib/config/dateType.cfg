/* -*-c++-*- */

// Defines the date type.
//
// SPI has its own representation of dates (spi::Date) but it is unlikely that
// you will be using this representation in your own library.
//
// Hence we need to convert between the outer type (spi::Date) and the inner
// type (in this case TDate which is typedef long).
//
// Note that spi::Date is implemented as an offset from some base date, and
// the same base date is used by TDate.
//
// Hence the translation code is very simple.

%module dateType;

// these header files are used in the implementation
// they are not visible to the client

#include <isda/ldate.h>
#include <isda/convert.h>
#include <isda/busday.h>
#include <isda/dateconv.h>
#include <isda/date_sup.h>

#include "isdaErrorHandler.hpp"

// somewhere at the start of the project you need to define how you
// represent dates in your library
//
// this is done via the typedef keyword
//
// the syntax of typedef is as follows:
//
// typedef builtin_type outer_type_name <inner_type_name>
//   [innerHeader=] [noDoc=]
// {
//     convert_in(builtin_type_value)
//     {
//         conversion_code returning inner_type_value
//     }
//
//     convert_out(inner_type_value)
//     {
//         conversion_code returning builtin_type_value
//     }
// };
//
// innerHeader is the name of a header file which defines the inner_type
// this is used internally but is not visible to the end user of the C++
// product DLL
//
// noDoc=True indicates that the newly defined type will not appear in the
// user guide - instead any references in the user guide will be to the
// builtin type
//
// you can use typedef for even simpler translations and validations and
// you might not even need to define an inner_type_name
//
// for example: typedef double Correlation with only convert_in defined
// the convert_in routine could validation that the correlation was in the
// range [-1,1] and return the input value in that case - no convert_out
// routine is necessary
//
// for example: typedef double BasisPoints could simply scale the input
// value down by 10,000 and multiply the output value by 10,000

/**
 * Defines the Date class.
 */
typedef date Date <TDate>
    typedef="typedef long" noDoc=True
{
    convert_in(date)
    {
        return (TDate)date;
    }

    convert_out(date)
    {
        return spi::Date(date);
    }
};

typedef datetime DateTime <double>
noDoc=True
{
    convert_in(dt)
    {
        return (double)dt;
    }

    convert_out(dt)
    {
        return spi::DateTime(dt);
    }
};

/** Constructs a date from year, month and day using the Gregorian calendar.
 *
 * Validates that the combination is valid.
 */
extern Date Date(
    /** Year A.D. - usually with 4 digits */
    int year, 
    /** Month - 1 = January, 12 = December etc. */
    int month,
    /** Day of the month, from 1 to 31. It is an error to use a number more
        than the days in the particular month. */
    int day) noLog=True
{
    CErrorHandler errorHandler;

    TDate date = JpmcdsDate(year,month,day);

    if (date < 0)
        errorHandler();

    return date;
}


/**
 * Defines the CString type - this is char* internally and std::string externally.
 */
typedef string CString <char*> noDoc=True
{
    convert_in(str)
    {
        return (char*)str.c_str();
    }

    convert_out(cstr)
    {
        if (!cstr)
            return std::string();
        return std::string(cstr);
    }
};

typedef bool Boolean <TBoolean> noDoc=True typedef="typedef int"
{
    convert_in(b)
    {
        return b ? TRUE : FALSE;
    }

    convert_out(b)
    {
        return b != 0;
    }
};


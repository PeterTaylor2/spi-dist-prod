/* -*-c++-*- */

/**
 * Defines some basic holiday functionality.
 */

%module holidays;

#include <isda/buscache.h>
#include <isda/busday.h>
#include <isda/dateadj.h>
#include <isda/ldate.h>
#include <isda/macros.h>
#include "isdaErrorHandler.hpp"

{
    CLIB_END_NAMESPACE

    typedef struct _TDateOrInterval
    {
        int type;
        long badDayConv;
        union
        {
            TDate         date;
            TDateInterval ivl;
        } d;
    } TDateOrInterval;

    /*
    ** These constants define the possible values of TDateOrInterval::type
    */
    #define JPMCDS_DOI_DATE    1 /* Defines a date */
    #define JPMCDS_DOI_BUS_IVL (JPMCDS_DATE_ADJ_TYPE_BUSINESS+2)
    #define JPMCDS_DOI_CAL_IVL (JPMCDS_DATE_ADJ_TYPE_CALENDAR+2)
    #define JPMDCDS_DOI_WKD_IVL (JPMCDS_DATE_ADJ_TYPE_WEEKDAY+2)

    CLIB_BEGIN_NAMESPACE
    TDateOrInterval* DOINewFromDate(TDate date, long badDayConv);
    TDateOrInterval* DOINewFromInterval(int dateAdjType, long badDayConv, TDateInterval* interval);
    void DOIDelete(TDateOrInterval* doi);
    TDateOrInterval* DOICopy(TDateOrInterval* doi);
    TDate DOIEndDate(TDate startDate, TDateOrInterval* doi, char* holidays);
}


/**
 * Bad day convention.
 *
 * This is used to determine rules for adjusting bad days (holidays and
 * weekends) to good days (working days).
 */
enum BadDayConv<long>
{
    FOLLOW = JPMCDS_BAD_DAY_FOLLOW     "Follow" "F",
    PREVIOUS = JPMCDS_BAD_DAY_PREVIOUS "Previous" "P",
    NONE = JPMCDS_BAD_DAY_NONE         "None" "N",
    MODIFIED = JPMCDS_BAD_DAY_MODIFIED "ModifiedFollow" "M"
};

/**
 * Holidays in the system are represented by strings.
 *
 * The string either represents a filename (which we read once only for efficiency), or
 * a holiday name created directly, or NONE (no holidays, weekends are not working days), or
 * No_Weekends (no holidays, weekends are working days).
 */
typedef string Holidays <char*>
{
    convert_in(str)
    {
        return (char*)str.c_str();
    }

    convert_out(cstr)
    {
        if (!cstr)
            return std::string();
        return std::string(cstr);
    }
};


//extern string HolidaysCombine(
//    Holidays holidayNames[],
//    Holidays newName)
//{
//    SPI_NOT_IMPLEMENTED;
//}

extern Date[] HolidaysGetDates(
    Holidays holidays)
{
    CErrorHandler errorHandler;

    THolidayList* hl = JpmcdsHolidayListFromCache(holidays);
    if (!hl)
        errorHandler();
    // Note that hl is owned by the cache so we *must not* delete it

    TDateList* dl = hl->dateList;

    if (!dl)
    {
        throw spi::RuntimeError(
            "No datelist for holiday name %s", holidays);
    }

    return std::vector<TDate>(dl->fArray, dl->fArray+dl->fNumItems);
}

/**
 * This function loads a holiday file into memory.
 * This is particularly useful if the holiday file has changed on the disk.
 */
extern int HolidaysLoadFile(
    Holidays fileName) excelOptions="slow"
{
    CErrorHandler errorHandler;

    if (JpmcdsHolidayLoadFromDisk(fileName, fileName) != SUCCESS)
        errorHandler();

    return SUCCESS;
}

//extern int HolidaysSetDates(
//    Holidays name,
//    Date     dates[])
//{
//    SPI_NOT_IMPLEMENTED;
//
//    // it seems we would need to create the THolidayList using
//    // JpmcdsHolidayListNewGeneral and then call JpmcdsHolidayListAddToCache
//}

extern bool IsBusinessDay(
    Date     date,
    Holidays holidays)
{
    CErrorHandler errorHandler;

    TBoolean isBusinessDay;
    if (JpmcdsIsBusinessDay(date, holidays, &isBusinessDay))
        errorHandler();

    return isBusinessDay == TRUE;
}

extern bool IsHoliday(
    Date     date,
    Holidays holidays)
{
    CErrorHandler errorHandler;

    THolidayList* hl = JpmcdsHolidayListFromCache(holidays);
    if (!hl)
        errorHandler();

    TBoolean isHoliday;
    if (JpmcdsHolidayListIsHoliday(date, hl, &isHoliday))
        errorHandler();

    return isHoliday == TRUE;
}

extern bool IsWeekend(Date date)
{
    int is_weekend = JPMCDS_IS_WEEKEND(date, JPMCDS_WEEKEND_STANDARD);
    return is_weekend != 0;
}

/**
*************************************************************************
** Calculates the number of business days between two dates (FROM & TO).
**
** Algorithm:
** 1. if FROM = TO, the result is 0
** 2. if FROM < TO, the result is the number of business days in the CLOSED
**    interval of [FROM+1,TO]
** 3. if FROM > TO, the result is negated number of business days in the
**    CLOSED interval of [TO,FROM-1]
***************************************************************************
*/
extern int BusDaysDiff(
    Date     fromDate,
    Date     toDate,
    Holidays holidays)
{
    CErrorHandler errorHandler;

    THolidayList* hl = JpmcdsHolidayListFromCache(holidays);
    if (!hl)
        errorHandler();

    long result;
    if (JpmcdsHolidayListBusinessDaysDiff(fromDate, toDate, hl, &result))
        errorHandler();

    return (int)result;
}

extern Date BusinessDay
(Date       date,
 BadDayConv method,
 Holidays   holidays)
{
    TDate result;

    CErrorHandler errorHandler;
    if (JpmcdsBusinessDay(
        date, method, holidays, &result) != SUCCESS)
    {
        errorHandler();
    }
    return result;
}


extern Date AddBusDays
(Date     startDate,
 int      offset,
 Holidays holidays)
{
    CErrorHandler errorHandler;

    TDate result;
    if (JpmcdsDateFromBusDaysOffset(startDate, offset, holidays,
        &result) != SUCCESS)
    {
        errorHandler();
    }
    return result;
}

/**
 * Returns the last business day in the month of the given date
 */
extern Date BusinessEOM
(   
    /** Date which defines the current month */
    Date       date,
    /** Name of the holiday file which defines which days are holidays */
    Holidays   holidays)
{
    TDate endOfMonth;

    CErrorHandler errorHandler;
    if (JpmcdsDateToBusinessEOM(
        date, holidays, &endOfMonth) != SUCCESS)
    {
        errorHandler();
    }
    return endOfMonth;
}

/**
 * Adds a number of date intervals to a given date and then adjusts
 * the result so that it is a good business day.
 */
extern Date DateFwdBus(
    /** Start date. */
    Date startDate,
    /** Number of intervals to move. */
    int numIntervals,
    /** Date interval to move. */
    DateInterval ivl,
    /** Bad day convention. */
    BadDayConv badDayMethod,
    /** Holiday file. */
    Holidays holidays)
{
    CErrorHandler errorHandler;

    TDate endDate;

    TDateInterval multiInterval = ivl;
    multiInterval.prd *= numIntervals;

    if (JpmcdsDateFwdThenAdjust(startDate, &multiInterval,
                             badDayMethod,
                             holidays,
                             &endDate) != SUCCESS)
    {
        errorHandler();
    }
    return endDate;
}


typename struct _TDateOrInterval TDateOrInterval(isOpen=True freeFunc=DOIDelete);

class virtual DateOrInterval<typename TDateOrInterval>
{
    //extern Date EndDate(Date startDate, Holidays holidays) const
    //{
    //    return DOIEndDate(startDate, self, holidays);
    //}

    DateOrInterval(Date date)
    {
        return DateOrIntervalDate::Make(date, BadDayConv::NONE);
    }

    DateOrInterval(string str)
    {
        return DateOrIntervalInterval::Coerce(str);
    }
};

class DateOrIntervalDate<typename TDateOrInterval> : DateOrInterval
{
    public Date date
    {
        return self->d.date;
    }

    public BadDayConv badDayConv
    {
        return self->badDayConv;
    }

    validate_inner(inner)
    {
        return inner->type == JPMCDS_DOI_DATE;
    }

    as_value()
    {
        if (badDayConv() == BadDayConv::NONE)
            return spi::Value(date());
        return spi::Value();
    }
}
{
    return DOINewFromDate(date, badDayConv);
}

class DateOrIntervalInterval<typename TDateOrInterval> : DateOrInterval asValue=True
{
    public DateInterval ivl
    {
        return self->d.ivl;
    }

    public BadDayConv badDayConv = "F"
    {
        return self->badDayConv;
    }

    public char adjType = 'C'
    {
        switch(self->type)
        {
        case JPMCDS_DOI_BUS_IVL: return 'B';
        case JPMCDS_DOI_CAL_IVL: return 'C';
        case JPMDCDS_DOI_WKD_IVL: return 'W';
        }
        throw spi::RuntimeError("Bad value for type %d", self->type);
    }

    validate_inner(inner)
    {
        return inner->type >= 2 && inner->type <= 4;
    }

    as_value()
    {
        std::ostringstream oss;

        oss << ivl()->name();

        char adjType = this->adjType();
        BadDayConv::Enum badDayConv = this->badDayConv();

        if (adjType != 'C')
            oss << "," << adjType;

        switch(badDayConv)
        {
        case BadDayConv::MODIFIED:
            oss << ",M";
            break;
        case BadDayConv::PREVIOUS:
            oss << ",P";
            break;
        case BadDayConv::FOLLOW:
            oss << ",F";
            break;
        default:
            break; // do nothing
        }

        return spi::Value(oss.str());
    }
    
    DateOrIntervalInterval(string str)
    {
        if (str.length() == 0)
            THROW_RUNTIME_ERROR("Empty string cannot be converted to DateOrInterval");

        std::vector<std::string> parts = spi::StringSplit(str, ',');
        SPI_POST_CONDITION(parts.size() > 0);

        DateIntervalConstSP ivl = DateInterval::Coerce(parts[0]);
        switch (parts.size())
        {
        case 1: // e.g. 3M
            return DateOrIntervalInterval::Make(ivl, BadDayConv::NONE, 'C');
        case 2: // e.g. 3M,M
            switch (toupper(parts[1][0]))
            {
            case 'M':
            case 'F':
            case 'N':
            case 'P':
                return DateOrIntervalInterval::Make(ivl, BadDayConv(parts[1]), 'C');
            case 'W':
                return DateOrIntervalInterval::Make(ivl, BadDayConv::NONE, 'W');
            case 'B':
                return DateOrIntervalInterval::Make(ivl, BadDayConv::NONE, 'B');
            case 'C':
                return DateOrIntervalInterval::Make(ivl, BadDayConv::NONE, 'B');
            default:
                THROW_RUNTIME_ERROR("Cannot convert '" << str << "' to DateOrInterval");
            }
        case 3: // e.g. 2D,W,F
            return DateOrIntervalInterval::Make(ivl, BadDayConv(parts[2]),
                toupper(parts[1][0]));
        default:
            THROW_RUNTIME_ERROR("Too many parts to string " << str);
        }
    }
}
{
    int type;
    switch(adjType)
    {
    case 'B':
        type = JPMCDS_DATE_ADJ_TYPE_BUSINESS;
        break;
    case 'C':
        type = JPMCDS_DATE_ADJ_TYPE_CALENDAR;
        break;
    case 'W':
        type = JPMCDS_DATE_ADJ_TYPE_WEEKDAY;
        break;
    default:
        throw spi::RuntimeError("Bad value for type '%c'", adjType);
    }

    return DOINewFromInterval(type, badDayConv, &ivl);
}

enum IntervalAdjType<int>
{
    CALENDAR = JPMCDS_DATE_ADJ_TYPE_CALENDAR
    "CALENDAR" "C",
    BUSINESS = JPMCDS_DATE_ADJ_TYPE_BUSINESS
    "BUSINESS" "B",
    WEEKDAY = JPMCDS_DATE_ADJ_TYPE_WEEKDAY
    "WEEKDAY" "W"
};

extern DateOrIntervalInterval DateOrIntervalIntervalMake(
    DateInterval ivl,
    BadDayConv badDayConv="F",
    char adjType='C')
    noConvert=True
{
    return DateOrIntervalInterval::Make(ivl, badDayConv, adjType);
}

extern Date DateFwdAdj(
    Date startDate,
    int days,
    IntervalAdjType adjType,
    Holidays holidays)
{
    CErrorHandler errorHandler;

    TDateAdjIntvl interval;
    JPMCDS_SET_ADJ_INTERVAL_DAYS(interval, days);
    interval.isBusDays = adjType;
    interval.holidayFile = holidays;

    TDate date;
    if (JpmcdsDtFwdAdj(startDate, &interval, &date) != SUCCESS)
        errorHandler();

    return date;
}

extern Date DOIEndDate(Date startDate, DateOrInterval doi, Holidays holidays) 
{
    return DOIEndDate(startDate, doi, holidays);
}

// implementation of TDateOrInterval functions
// these are not provided by ISDA/CDS library
{
TDateOrInterval* DOINewFromDate(TDate date, long badDayConv)
{
    CErrorHandler errorHandler;
    TDateOrInterval* doi = NEW(TDateOrInterval);
    if (!doi)
        errorHandler();

    doi->type = JPMCDS_DOI_DATE;
    doi->badDayConv = badDayConv;
    doi->d.date = date;

    return doi;
}

TDateOrInterval* DOINewFromInterval(int dateAdjType, long badDayConv, TDateInterval* interval)
{
    CErrorHandler errorHandler;
    TDateOrInterval* doi = NEW(TDateOrInterval);
    if (!doi)
        errorHandler();

    doi->type = dateAdjType + 2;
    doi->badDayConv = badDayConv;
    doi->d.ivl = *interval;

    return doi;
}

void DOIDelete(TDateOrInterval* doi)
{
    FREE(doi);
}

TDateOrInterval* DOICopy(TDateOrInterval* doi)
{
    if (!doi)
        return NULL;

    CErrorHandler errorHandler;
    TDateOrInterval* copy = NEW(TDateOrInterval);
    if (!copy)
        errorHandler();

    *copy = *doi;

    return copy;
}

TDate DOIEndDate(TDate startDate, TDateOrInterval* doi, char* holidays)
{
    SPI_PRE_CONDITION(doi != NULL);
    SPI_PRE_CONDITION(holidays != NULL);

    TDate date;
    CErrorHandler errorHandler;

    switch (doi->type)
    {
    case JPMCDS_DOI_DATE:
        if (JpmcdsBusinessDay(doi->d.date, doi->badDayConv, holidays, &date))
            errorHandler();
        return date;
    case JPMCDS_DOI_BUS_IVL:
    case JPMCDS_DOI_CAL_IVL:
    case JPMDCDS_DOI_WKD_IVL:
        {
            TDateAdjIntvl adjInterval;
            adjInterval.interval    = doi->d.ivl;
            adjInterval.isBusDays   = doi->type - 2;
            adjInterval.holidayFile = holidays;
            adjInterval.badDayConv  = doi->badDayConv;

            if (JpmcdsDtFwdAdj(startDate, &adjInterval, &date))
                errorHandler();
        }
        return date;
    default:
        throw spi::RuntimeError("Unknown DateOrInterval type %d", doi->type);
    }
}


}

/* -*-c++-*- */

/**
 * CashFlowList class and related functions.
 */

%module cashflow;

#include <isda/bastypes.h>
#include <isda/cashflow.h>
#include <isda/macros.h>
#include <isda/stub.h>
#include "isdaErrorHandler.hpp"

typename struct _TCashFlowList TCashFlowList (freeFunc=JpmcdsFreeCFL isOpen=True);

/**
 * Stores dates and amounts of cash flows.
 * The date/amount pairs are not necessarily stored in date order.
 */
class CashFlowList<typename TCashFlowList>
{
    /**
    Array of dates. The dates do not have to ordered.
    */
    public Date[] dates
    {
        std::vector<TDate> dates;
        for (int i = 0; i < self->fNumItems; ++i)
            dates.push_back(self->fArray[i].fDate);
        return dates;
    }

    /**
    Array of cash amounts. Each amount must correspond to a date in the
    dates array at the same index. The number of amounts must be the same
    as the number of dates.
    */
    public double[] amounts
    {
        std::vector<double> amounts;
        for (int i = 0; i < self->fNumItems; ++i)
            amounts.push_back(self->fArray[i].fAmount);
        return amounts;
    }

    /**
    Number of dates/amounts.
    */
    property int numItems
    {
        return self->fNumItems;
    }

    /** Coerces to a DateList using the dates of the cash flow list */
    operator DateList()
    {
        return DateList::Make(dates());
    }

}
{
    SPI_PRE_CONDITION(dates.size() == amounts.size());

    CErrorHandler errorHandler;

    TCashFlowList* cfl = NULL;
    if (dates.size() > 0)
    {
        cfl = JpmcdsNewCFL(
            (TDate*)&dates[0],
            (double*)&amounts[0],
            (int)dates.size());
    }
    else
    {
        cfl = JpmcdsNewEmptyCFL(0);
    }

    if (!cfl)
        errorHandler();

    return cfl;
}

/**
This function calculates the cash flow dates and amounts associated with the
fixed leg of an interest rate swap.

The calculations begin at the start date, with dates separated by the given
date interval, and ends on the maturity date.

WARNING: This routine uses cash flow and yield conventions associated with
swaps. The conventions are different from those associated with bonds.

About the calculations:

* A cash flow at start date is only include if initial negative principal cash
flow flag is 1.

* If the total interval between maturity date and start date is not a multiple
of the coupon interval, then a stub period is required. If the stub location is
at the front, then dates are counted backwards from the maturity date. If stub
location is at the back, then dates are counted forward from the start date.

* If a stub is required, then the stub payment is calculated using the stub
type via the function JpmcdsStubPayment. Both the stub location and stub type are
defined by the stub method object.

* Stub Location Flag: The date counting method used in this function may
produce seemingly unexpected results. For example, if start date is 30th
September and maturity date is 31st October of the same year, and the coupon
interval is 1 month, then for a front stub you will not get a stub, but for a
back stub you will get a stub between 30th October and 31st October. You can
avoid this issue by using the flexible end of month adjust date interval type
F instead of M.

*/
extern CashFlowList SwapFixedFlows(
    double       couponRate,
    /** Start date of the swap */
    Date         startDate,
    /** Time between payments */
    DateInterval couponInterval,
    /** Maturity date of the swap */
    Date         maturityDate,
    /** Day count convention used for calculating the amounts */
    DayCountConv dayCountConv,
    /** If there is a stub is it at the front (or back)? */
    bool         frontStub=True,
    /** If there is a stub is it short (or long)? */
    bool         shortStub=True,
    /** Should we subtract an initial payment of -1 */
    bool         subtractInitial=False,
    /** Should we keep the start date with zero payment if there is a stub,
        i.e. return a date before the startDate in the case of a stub. */
    bool         keepStartDate=False,
    /** Should we add a final payment of +1 */
    bool         addFinal=False,
    /** Accrual bad day convention */
    BadDayConv   accBadDayConv,
    /** Payment bad day convention */
    BadDayConv   payBadDayConv,
    /** Name of holiday file for determining whether a day is a business day */
    string       holidayFile)
{
        long stubPlacement = 0;
        long flags = 0;

        if (!frontStub)
            stubPlacement += JPMCDS_STUB_POSN_BACK;
        if (!shortStub)
            stubPlacement += JPMCDS_STUB_LENGTH_LONG;

        if (subtractInitial)
            flags += JPMCDS_SUBTRACT_INITIAL;
        if (addFinal)
            flags += JPMCDS_ADD_FINAL;
        if (keepStartDate)
            flags += JPMCDS_KEEP_START_DATE;

        CErrorHandler errorHandler;
        TCashFlowList* cfl = JpmcdsMakeCFL(
            couponRate,
            startDate,
            &couponInterval,
            maturityDate,
            *dayCountConv,
            stubPlacement,
            flags,
            accBadDayConv,
            payBadDayConv,
            (char*)holidayFile.c_str());

        if (!cfl)
            errorHandler();

        return cfl;
    }

/**
 * Merges two cash flow lists together
 */
extern CashFlowList CashFlowListMerge(
    CashFlowList a,
    CashFlowList b)
{
    CErrorHandler errorHandler;
    TCashFlowList* cfl = JpmcdsMergeCFL(a, b);
    if (!cfl)
        errorHandler();
    return cfl;
}

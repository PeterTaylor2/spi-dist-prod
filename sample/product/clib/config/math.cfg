/* -*-c++-*- */

// configuration file for some simple mathematical functions
// defining namespace as part of the module definition means that all the
// functions will appear in the Math namespace

%module math
    namespace=Math;

#include <math.h>
#include <isda/lintrp.h>
#include "isdaErrorHandler.hpp"

/**
 * Adds upto three numbers together.
 */
extern double Add(
    /** First number to be summed. */
    double x,
    /** Second number to be summed. */
    double y,
    /** Third number to be summed - if not provided then it will use 0. */
    double z=0)
{
    return x+y+z;
}

/**
 * Defines a binary operation.
 */
enum BinaryOperator
{
    /** Adds two number together */
    Add "+",
    /** Subtracts the second number from the first number */
    Subtract "-",
    /** Multiplies two numbers together */
    Multiply "*",
    /** Divides the first number by the second number */
    Divide "/",
    /** Raises the first number to the power of the second number */
    Power "**"
};

/**
 * Performs a binary operation on two numbers - return x op y.
 */
extern double BinaryOp(
    /** The first number */
    double x,
    /** The binary operator applied */
    BinaryOperator op,
    /** The second number */
    double y)
{
    const char routine[] = "BinaryOp";

    switch(op)
    {
    case BinaryOperator::Add:
        return x+y;
    case BinaryOperator::Subtract:
        return x-y;
    case BinaryOperator::Multiply:
        return x*y;
    case BinaryOperator::Divide:
        return x/y;
    case BinaryOperator::Power:
        return pow(x,y);
    case BinaryOperator::UNINITIALIZED_VALUE:
        throw std::runtime_error("Unitialized BinaryOperator in BinaryOp");
    }

    throw spi::RuntimeError("Unsupported binary operation %d in BinaryOp",
                            (int)op);
}

/**
 * Defines a Matrix object consisting of a rectangular array of real numbers.
 *
 * At present we don't provide any significant math functions which deal with
 * the Matrix object.
 */
struct Matrix
{
    /** The data is a two-dimensional rectangular array of doubles. */
    double[][] data;

    // dynamic properties
    //
    // these depend on the overall size of the matrix and hence we cannot
    // define them all individually
    //
    // in this example we get colN and rowN where N is 1-starting
    dynamic_properties
    {
        size_t nr = data.Rows();
        size_t nc = data.Cols();
        for (size_t j = 0; j < nc; ++j)
        {
            std::string fn = spi::StringFormat("col%d", (int)j+1);
            std::vector<double> colj;
            for (size_t i = 0; i < nr; ++i)
                colj.push_back(data[i][j]);
            obj_map->SetDoubleVector(fn.c_str(), colj);
        }
        for (size_t i = 0; i < nr; ++i)
        {
            std::string fn = spi::StringFormat("row%d", (int)i+1);
            std::vector<double> rowi;
            for (size_t j = 0; j < nc; ++j)
                rowi.push_back(data[i][j]);
            obj_map->SetDoubleVector(fn.c_str(), rowi);
        }
    }

    // example of a function (or class method) returning a matrix

    /** 
     * Returns all the data for the matrix.
     *
     * Should give the same result as accessing the data attribute.
     */
    extern double[][] Data() const
    {
        return self->data;
    }

    /**
     * Returns an individual cell of the matrix.
     */
    extern double Cell(int i, int j) const
    {
        return self->data[(size_t)i][(size_t)j];
    }

    /**
     * Returns the number of rows of the matrix.
     */
    extern int Rows() const
    {
        return (int)self->data.Rows();
    }

    /**
     * Returns the number of columns of the matrix.
     */
    extern int Cols() const
    {
        return (int)self->data.Cols();
    }

    extern void Size(int& rows, int& cols) const
    {
        rows = (int)self->data.Rows();
        cols = (int)self->data.Cols();
    }
};

extern double LinearInterp(
    long[] xs,
    double[] fxs,
    double x)
{
    SPI_PRE_CONDITION(xs.size() > 0);
    SPI_PRE_CONDITION(xs.size() == fxs.size());

    CErrorHandler errorHandler;

    double result;
    if (JpmcdsLinInterpLongPoint1(
        (long*)&xs[0],
        sizeof(long),
        (int)xs.size(),
        (double*)&fxs[0],
        sizeof(double),
        x,
        NULL,
        &result) != SUCCESS)
    {
        errorHandler();
    }

    return result;
}

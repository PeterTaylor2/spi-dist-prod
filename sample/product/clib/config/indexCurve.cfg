/* -*-c++-*- */

%module indexCurve;

#include <isda-clib/indexCurve.h>
#include "isdaErrorHandler.hpp"

typename struct _TIndexCurveType TIndexCurveType
(isOpen=True isCached=True freeFunc=IndexCurveTypeFree copyFunc=IndexCurveTypeCopy);

typename struct _TIndexCurveFixings TIndexCurveFixings
(isOpen=True isCached=True freeFunc=IndexCurveFixingsFree copyFunc=IndexCurveFixingsCopy);

typename struct _TIndexCurve TIndexCurve
(isOpen=True isCached=True freeFunc=IndexCurveFree copyFunc=IndexCurveCopy);

class IndexCurveType<typename TIndexCurveType> canPut=True
{
    public CString curveName;
    public DateInterval rateTenor
    {
        return self->rateTenor;
    }
    public DayCountConv rateDayCountConv noCopy=True
    {
        return DayCountConvCopy(self->rateDayCountConv);
    }
    public DateInterval fixedSwapInterval
    {
        return self->fixedSwapInterval;
    }
    public DayCountConv fixedSwapDayCountConv noCopy=True
    {
        return DayCountConvCopy(self->fixedSwapDayCountConv);
    }
    public DateInterval floatSwapInterval
    {
        return self->floatSwapInterval;
    }
    public DayCountConv floatSwapDayCountConv noCopy=True
    {
        return DayCountConvCopy(self->floatSwapDayCountConv);
    }
    public BadDayConv badDayConv;
    public Holidays holidayFile;
}
{
    CErrorHandler errorHandler;
    TIndexCurveType* self = IndexCurveTypeMake(
        curveName,
        &rateTenor,
        *rateDayCountConv,
        &fixedSwapInterval,
        *fixedSwapDayCountConv,
        &floatSwapInterval,
        *floatSwapDayCountConv,
        badDayConv,
        holidayFile);

    if (!self)
        errorHandler();

    return self;
}

class IndexCurveFixings<typename TIndexCurveFixings>
{
    public Date[] dates
    {
        std::vector<TDate> dates;
        for (int i = 0; i < self->numFixings; ++i)
            dates.push_back(self->fixings[i].fDate);
        return dates;
    }

    public double[] rates
    {
        std::vector<double> rates;
        for (int i = 0; i < self->numFixings; ++i)
            rates.push_back(self->fixings[i].fRate);
        return rates;
    }

}
{
    PRE_CONDITION(rates.size() == dates.size());
    std::vector<TRatePt> fixings;
    int numFixings = (int)dates.size();
    for (int i = 0; i < numFixings; ++i)
    {
        TRatePt point;
        point.fDate = dates[i];
        point.fRate = rates[i];
        fixings.push_back(point);
    }

    CErrorHandler errorHandler;
    TIndexCurveFixings* self = IndexCurveFixingsMake(
        numFixings, 
        numFixings > 0 ? &fixings[0] : NULL);
    if (!self)
        errorHandler();

    return self;
}

class IndexCurve<typename TIndexCurve>
{
    public public ZeroCurve zc
    {
        return ZeroCurve::Wrap(spi::SafeCopy(self->zc, ZeroCurveCopy));
    }
    public IndexCurveType curveType;
    public IndexCurveFixings curveFixings?;
}
{
    CErrorHandler errorHandler;
    TIndexCurve* self = IndexCurveMake(zc->get_inner(), curveType, curveFixings);
    if (!self)
        errorHandler();
    return self;
}


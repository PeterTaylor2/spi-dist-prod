/* -*-c++-*- */

%module rates;

#include <isda/tcurve.h>
#include <isda/interp.h>
#include <isda/gtozc.h>
#include <isda/zr2fwd.h>
#include <isda/macros.h>
#include "isdaErrorHandler.hpp"

{
    typedef long TRateType;
    TRateType* RateTypeCopy(TRateType rateType);
    TRateType* RateTypeCopy(double rateType);
    TRateType RateTypeFromString(const std::string& str);
    const char* RateTypeToString(TRateType rateType);
}

typename long TRateType(isOpen=True freeFunc=JpmcdsFreeSafe);

/**
 * Defines the type of the rate.
 *
 * This can be a compound rate with a number of compounding periods per
 * year, or a continuously compounded rate, or a simple rate.
 */
class RateType<typename TRateType>
{
    /**
     * Automatically converts an integer to a rate type.
     *
     * 1,2,4,12,365 = number of periods per year.
     * 0 = simple rate (1/(1+rt)).
     * 5000 = continuous basis.
     * 512 = discount rate (1-rt).
     * -2 = discount factor.
     */
    RateType(long number)
    {
        return RateType::Make(number);
    }

    RateType(string name)
    {
        return RateType::Make(RateTypeFromString(name));
    }

    public long number
    {
        return *self;
    }

    property string name
    {
        return RateTypeToString(*self);
    }

    as_value()
    {
        return name();
    }

    static RateType Make(string name)
        noConvert=True
        noLog=True
    {
        return RateType::Coerce(name);
    }
}
{
    return RateTypeCopy(number);
}

// helper functions for TRateType
{
TRateType* RateTypeCopy(TRateType rateType)
{
    RateTypeToString(rateType); // effectively also validates rateType

    CErrorHandler errorHandler;

    TRateType* copy = NEW(TRateType);
    if (!copy)
        errorHandler();

    *copy = rateType;
    return copy;
}

TRateType* RateTypeCopy(double rateType)
{
    return RateTypeCopy(spi_util::IntegerCast<TRateType>(rateType));
}

TRateType RateTypeFromString(const std::string& str)
{
    static std::map<std::string,TRateType> nameMap;

    if (nameMap.empty())
    {
        nameMap["discount factor"] = JPMCDS_DISCOUNT_FACTOR;
        nameMap["discount rate"]   = JPMCDS_DISCOUNT_RATE;
        nameMap["simple"]          = JPMCDS_SIMPLE_BASIS;
        nameMap["continuous"]      = JPMCDS_CONTINUOUS_BASIS;
        nameMap["annual"]          = JPMCDS_ANNUAL_BASIS;
        nameMap["semi-annual"]     = 2;
        nameMap["quarterly"]       = 4;
        nameMap["monthly"]         = 12;
        nameMap["daily"]           = 365;
    }

    std::map<std::string,TRateType>::const_iterator iter = nameMap.find(
        spi::StringLower(str));

    if (iter == nameMap.end())
        throw spi::RuntimeError("could not convert '%s' to rate type",
            str.c_str());

    return iter->second;
}

const char* RateTypeToString(TRateType rateType)
{
    switch(rateType)
    {
    case JPMCDS_CONTINUOUS_BASIS:
        return "Continuous";
    case JPMCDS_DISCOUNT_RATE:
        return "Discount Rate";
    case JPMCDS_SIMPLE_BASIS:
        return "Simple";
    case JPMCDS_ANNUAL_BASIS:
        return "Annual";
    case JPMCDS_DISCOUNT_FACTOR:
        return "Discount Factor";
    case 2:
        return "Semi-Annual";
    case 4:
        return "Quarterly";
    case 12:
        return "Monthly";
    case 365:
        return "Daily";
    default:
        if (rateType > 0)
            return "# per year";
        else
            throw spi::RuntimeError("Negative number %d not supported", rateType);
        break;
    }
}

} // end of helper functions for TRateType

/**
 * Converts a rate to a discount factor using a day count conventions
 * and rate type.
 */
extern double RateToDiscount(
    /** The rate, e.g. 0.03 = 3% */
    double       rate,
    /** The start date for the rate */
    Date         startDate,
    /** The maturity date for the rate */
    Date         maturityDate,
    /** The day count convention for the rate */
    DayCountConv dayCount,
    /** The type of the rate, e.g. simple, compound etc */
    public RateType     rateType)
{
    CErrorHandler errorHandler;

    double discount;
    if (JpmcdsRateToDiscount(rate, startDate, maturityDate,
            *dayCount, rateType->number(), &discount))
    {
        errorHandler();
    }

    return discount;
}

/**
 * Converts a discount factor to a rate using day count convention
 * and rate type.
 */
extern double DiscountToRate(
    /** The discount factor */
    double       discount,
    /** The start date for the requested rate */
    Date         startDate,
    /** The maturity date for the requested rate */
    Date         maturityDate,
    /** The day count convention for the requested rate */
    DayCountConv dayCount,
    /** The type of the requested rate, e.g. simple, compound etc */
    RateType     rateType)
{
    CErrorHandler errorHandler;

    double rate;
    if (JpmcdsDiscountToRate(discount, startDate, maturityDate,
            *dayCount, *rateType, &rate))
    {
        errorHandler();
    }

    return rate;
}


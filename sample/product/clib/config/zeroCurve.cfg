/* -*-c++-*- */

%module zeroCurve;

#include <isda/convert.h>
#include <isda/tcurve.h>
#include <isda/interp.h>
#include <isda/gtozc.h>
#include <isda/macros.h>
#include <isda/zr2fwd.h>
#include <isda/zr2coup.h>
#include <isda-clib/zeroCurve.h>
#include "isdaErrorHandler.hpp"

/**
 * Interpolation type for extracting rates from curves.
 */
enum InterpType<long>
{
    /** Linear interpolation. */
    LINEAR_INTERP = JPMCDS_LINEAR_INTERP,
    /** Flat forwards interpolation. */
    FLAT_FORWARDS = JPMCDS_FLAT_FORWARDS
};

typename struct _TZeroCurve TZeroCurve(
    isOpen=True isCached=True freeFunc=ZeroCurveFree copyFunc=ZeroCurveCopy);

/**
 * Defines a curve of zero coupon rates.
 */
class ZeroCurve<typename TZeroCurve>
{
    /**
     * Base date of the curve.
     *
     * This is the date for which zero coupon prices are identically
     * equal to 1.0.
     */
    public Date baseDate
    {
        return self->tc->fBaseDate;
    }

    property int numItems
    {
        return self->tc->fNumItems;
    }

    /**
     * Interpolation type used to interpolate rates for dates between
     * the dates defined within the curve.
     */
    public InterpType interpType
    {
        return self->interpType;
    }

    /**
     * Dates in the curve.
     *
     * These need to be unique and in ascending order.
     */
    public Date[] dates
    {
        std::vector<TDate> dates;
        TCurve* tc = self->tc;

        for (int i = 0; i < tc->fNumItems; ++i)
            dates.push_back(tc->fArray[i].fDate);

        return dates;
    }

    /**
     * Zero coupon rates in the curve with rates corresponding to dates.
     */
    public double[] rates
    {
        std::vector<double> rates;
        TCurve* tc = self->tc;

        for (int i = 0; i < tc->fNumItems; ++i)
            rates.push_back(tc->fArray[i].fRate);

        return rates;
    }
    
    /**
     * Describes how the rates are expressed, e.g. annually compounded,
     * continously compounded etc.
     */
    public RateType rateType noCopy=True
    {
        return RateTypeCopy(self->tc->fBasis);
    }

    /**
     * Describes how we measure time in the curve.
     *
     * If we have a rate for time t then we must be able to calculate t
     * for a given date.
     *
     * We do this using the day count convention.
     */
    public DayCountConv dayCountConv noCopy=True
    {
        return DayCountConvCopy(self->tc->fDayCountConv);
    }

    extern double ZeroRate(
        Date interpDate) const
    {
        CErrorHandler errorHandler;
        double rate;

        if (JpmcdsForwardFromZCurve(
            self->tc,
            self->interpType,
            self->tc->fBaseDate,
            interpDate,
            self->tc->fDayCountConv,
            spi_util::IntegerCast<long>(self->tc->fBasis),
            &rate) != SUCCESS)
        {
            errorHandler();
        }

        return rate;
    }

    extern double PV(
        Date      interpDate) const
    {
        CErrorHandler errorHandler;

        double discount;
        if (JpmcdsDiscountDate(interpDate, self->tc, self->interpType, &discount))
            errorHandler();
        return discount;
    }

    extern double FV(
        Date startDate,
        Date endDate) const
    {
        double startDiscount = PV(self, startDate);
        double endDiscount = PV(self, endDate);

        return endDiscount / startDiscount;
    }


}
{
    PRE_CONDITION(dates.size() == rates.size());

    CErrorHandler errorHandler;

    TCurve* tc = NULL;
    if (dates.size() == 0)
    {
        tc = JpmcdsNewTCurve(baseDate, 0, *rateType, *dayCountConv);
    }
    else
    {
        tc = JpmcdsMakeTCurve(baseDate, (TDate*)&dates[0], (double*)&rates[0], (int)dates.size(),
            *rateType, *dayCountConv);
    }
    if (!tc)
        errorHandler();

    return ZeroCurveMake(tc, interpType);
}

/**
 * Generates a sample zero curve out to 10 years with slope and some extra
 * shape which goes up and decays to zero.
 *
 * Not to be used for pricing - simply a device to get example curves
 * with a bit of shape.
 */
extern ZeroCurve ZeroCurveSample(
    Date       baseDate,
    double     baseRate,
    double     slope,
    double     hump=0.0,
    InterpType interpType)
{
    const std::vector<std::string>& intervals = spi::StringSplit(
        "1M,3M,6M,1Y,2Y,3Y,4Y,5Y,7Y,10Y", ',');
    static double slopeRates[] = {
        0.0, 0.1, 0.2, 0.3, 0.5, 0.66, 0.76, 0.84, 0.94, 1.0};
    static double humpRates[] =  {
        0.0, 0.3, 0.5, 0.8, 1.0, 1.0, 0.9, 0.8, 0.5, 0.0};

    SPI_PRE_CONDITION(sizeof(slopeRates) == sizeof(double) * intervals.size());
    SPI_PRE_CONDITION(sizeof(humpRates) == sizeof(double) * intervals.size());

    std::vector<TDate> dates;
    std::vector<double> rates;

    CErrorHandler errorHandler;
    for (size_t i = 0; i < intervals.size(); ++i)
    {
        TDateInterval ivl;
        if (JpmcdsStringToDateInterval((char*)intervals[i].c_str(), "DateInterval", &ivl))
            errorHandler();

        TDate date;
        if (JpmcdsDtFwdAny(baseDate, &ivl, &date) != SUCCESS)
            errorHandler();

        double rate = baseRate + (slope * slopeRates[i] + hump * humpRates[i]) / 100.0;

        dates.push_back(date);
        rates.push_back(rate);
    }

    TCurve* tc = JpmcdsMakeTCurve(
        baseDate, &dates[0], &rates[0], (int)dates.size(), 1, JPMCDS_ACT_365F);
    if (!tc)
        errorHandler();

    return ZeroCurveMake(tc, interpType);
}

extern double ForwardRate(
    ZeroCurve zc,
    Date startDate,
    Date maturityDate,
    DayCountConv dcc,
    RateType basis)
{
    double rate;

    CErrorHandler errorHandler;

    if (JpmcdsForwardFromZCurve(zc->tc, zc->interpType, startDate, maturityDate,
        *dcc, *basis, &rate) != SUCCESS)
    {
        errorHandler();
    }

    return rate;
}

extern double MMRate(
    ZeroCurve zc,
    Date startDate,
    Date maturityDate,
    DayCountConv dcc)
{
    TRateType rateType = JPMCDS_SIMPLE_BASIS;
    return ForwardRate_Helper(zc, startDate, maturityDate, dcc, &rateType);
}

extern double SwapRate(
    ZeroCurve zc,
    Date startDate,
    DateInterval couponInterval,
    Date maturityDate,
    DayCountConv dcc,
    BadDayConv accBadDayConv,
    BadDayConv payBadDayConv,
    Holidays holidays,
    Boolean stubAtEnd=false)
{
    double couponRate;

    CErrorHandler errorHandler;
    if (JpmcdsZerosToCouponsPointAdj(
        zc->tc,
        zc->interpType,
        startDate,
        &couponInterval,
        maturityDate,
        *dcc,
        stubAtEnd,
        accBadDayConv,
        payBadDayConv,
        holidays,
        &couponRate) != SUCCESS)
    {
        errorHandler();
    }

    return couponRate;
}


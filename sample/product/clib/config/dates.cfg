/* -*-c++-*- */

%module dates;

// these header files are used in the implementation
// they are not visible to the client

#include <isda/cdate.h>
#include <isda/ldate.h>
#include <isda/busday.h>
#include <isda/convert.h>
#include <isda/macros.h>
#include <isda/dateconv.h>
#include <isda/date_sup.h>
#include <isda/yearfrac.h>
#include <isda/dtlist.h>
#include <time.h>

#include "isdaErrorHandler.hpp"

{
#include <isda/cdate.h>

    CLIB_END_NAMESPACE

    typedef long TDayCountConv;

    CLIB_BEGIN_NAMESPACE

    TDayCountConv* DayCountConvCopy(long dcc);
    TDateInterval* DateIntervalCopy(const TDateInterval* ivl);
}

/**
 * Returns the clock time since the start of execution.
 *
 * For Excel this function is volatile (which means that whenever you
 * re-calculate the sheet the function will be re-calculated even though
 * it has no dependencies) and hidden (which means it doesn't appear in
 * the function wizard).
 */
extern double ClockTime() excelOptions="volatile;hidden" noLog=True
{
    double clockTime = (double)clock() / CLOCKS_PER_SEC;
    return clockTime;
}

enum Weekday <long>
{
    MONDAY = JPMCDS_MONDAY         "Monday"    "Mon",
    TUESDAY = JPMCDS_TUESDAY       "Tuesday"   "Tue",
    WEDNESDAY = JPMCDS_WEDNESDAY   "Wednesday" "Wed",
    THURSDAY = JPMCDS_THURSDAY     "Thursday"  "Thu",
    FRIDAY = JPMCDS_FRIDAY         "Friday"    "Fri",
    SATURDAY = JPMCDS_SATURDAY     "Saturday"  "Sat",
    SUNDAY = JPMCDS_SUNDAY         "Sunday"    "Sun"
};

/**
 * Returns the day of the week as a number from 0 to 6, 0=Sunday, 1=Monday etc.
 */
extern Weekday DayOfWeek(
    /** Date for which we are calculating the day of the week. */
    Date date)
{
    CErrorHandler errorHandler;

    long dayOfWeek;
    if (JpmcdsDayOfWeek(date, &dayOfWeek) != SUCCESS)
        errorHandler();

    return dayOfWeek;
}

/**
 * Returns the number of days in the month as a number from 1 to 31 using the
 * Gregorian calendar.
 *
 * We also require the year in case we are in a leap year and the month is February.
 */
extern int DaysInMonth(
    /** Year A.D. - typically 4 digits */
    int year, 
    /** Month from 1 to 12. 1=January, 12=December etc */
    int month)
{
    CErrorHandler errorHandler;

    int daysInMonth = JpmcdsDaysInMonth(year, month);
    if (daysInMonth < 0)
        errorHandler();

    return daysInMonth;
}

/**
 * Returns the last day of the month
 */
extern void DateToEOM(
    /** The date for which we are calculating the last day of the month */
    Date date, 
    /** The last day of the month as output */
    Date& eom) noLog=true
{
    CErrorHandler errorHandler;

    if (JpmcdsDateToEOM(date, &eom) != SUCCESS)
        errorHandler();
}

// this is to test the alternative format for outputs...
extern void YMD(Date date, int& year, int& month, int& day)
{
    CErrorHandler errorHandler;

    TMonthDayYear mdy;
    if (JpmcdsDateToMDY(date, &mdy) != SUCCESS)
        errorHandler();

    year  = (int)mdy.year;
    month = (int)mdy.month;
    day   = (int)mdy.day;
}

// this is to test the alternative format for outputs...
extern void Year(Date date, int& year)
{
    CErrorHandler errorHandler;

    TMonthDayYear mdy;
    if (JpmcdsDateToMDY(date, &mdy) != SUCCESS)
        errorHandler();

    year  = (int)mdy.year;
}

// this is to test the alternative format for outputs...
extern void StartOfYear(int year, Date& startOfYear)
{
    CErrorHandler errorHandler;

    startOfYear = JpmcdsDate(year, 1, 1);
    if (startOfYear == FAILURE)
        errorHandler();
}

// this is to test alternative format for outputs...
extern void StartOfMonths(int year, Date[]& startOfMonths)
{
    startOfMonths.clear();
    for (int i = 1; i <= 12; ++i)
        startOfMonths.push_back(JpmcdsDate(year, i, 1));
}

typename long TDayCountConv(isOpen=True freeFunc=JpmcdsFreeSafe);

/**
 * Day count convention.
 *
 * This is used to compute fractions of a year between two dates.
 */
class DayCountConv<typename TDayCountConv>
{
    DayCountConv(string name)
    {
        return DayCountConv::Make(name);
    }

    DayCountConv(long id)
    {
        return DayCountConv::Wrap(DayCountConvCopy(id));
    }

    public CString name
    {
        return JpmcdsFormatDayCountConv(*self);
    }

    property long id
    {
        return *self;
    }

    as_value()
    {
        return name();
    }
}
{
    CErrorHandler errorHandler;
    TDayCountConv type;
    if (JpmcdsStringToDayCountConv(name, &type))
        errorHandler();

    return DayCountConvCopy(type);
}

// helper functions for DayCountConv
{
TDayCountConv* DayCountConvCopy(long dcc)
{
    CErrorHandler errorHandler;
    TDayCountConv* out = NEW(TDayCountConv);
    if (!out)
        errorHandler();

    *out = dcc;
    return out;
}
}


/**
 * Computes the day count fraction as a number of years between two
 * dates using a day count convention.
 */
extern double DayCountFraction(
    /** Start date. */
    Date startDate,
    /** End date. */
    Date endDate,
    /** Day count convention. */
    DayCountConv dcc)
{
    double yearFrac;
    CErrorHandler errorHandler;
    if (JpmcdsDayCountFraction(startDate, endDate, *dcc, &yearFrac))
       errorHandler();

    return yearFrac;
}

/**
 * Computes the number of days difference between two dates using a day
 * count convention.
 */
extern int DaysDiff(
    /** Start date. */
    Date startDate,
    /** End date. */
    Date endDate,
    /** Day count convention. */
    DayCountConv dcc)
{
    long numDays;

    CErrorHandler errorHandler;
    if (JpmcdsDaysDiff(startDate, endDate, *dcc, &numDays))
        errorHandler();

    return (int)numDays;
}

typename struct _TDateInterval TDateInterval
(freeFunc=JpmcdsFreeSafe isOpen=True copyFunc=DateIntervalCopy byValue=True boolTest="inner.prd != 0");

class DateInterval <typename TDateInterval> noId=True
{
    DateInterval(string name)
    {
        return DateInterval::Make(name);
    }

    property char units {
        return self.prd_typ;
    }

    property int periods {
        return self.prd;
    }

    public string name {
        return spi_util::StringFormat("%d%c", self.prd, self.prd_typ);
    }

    /**
     * Constructs DateInterval from number of periods and period type.
     */
    static DateInterval Make(
        /** Number of periods. */
        int numPeriods,
        /** Period type, e.g. M,D,W,Y etc. */
        char periodType)
    {
        CErrorHandler errorHandler;

        TDateInterval ivl;
        if (JpmcdsMakeDateInterval(numPeriods, periodType, &ivl))
        {
            errorHandler();
        }

        return ivl;
    }

}
{
    CErrorHandler errorHandler;

    TDateInterval ivl;
    if (JpmcdsStringToDateInterval((char*)name.c_str(), "DateInterval", &ivl))
    {
        errorHandler();
    }

    return ivl;
}

/**
 * Converts a date interval into a frequency of payments per year.
 *
 * For example a date interval of 1M would correspond to 12 payments per year.
 */
extern double DateIntervalFreq(DateInterval interval)
{
    CErrorHandler errorHandler;
    double freq;

    if (JpmcdsDateIntervalToFreq(&interval,&freq) != SUCCESS)
        errorHandler();

    return freq;
}

/**
 * Converts a date interval into a number of years.
 *
 * For a daily interval (e.g. 1D, 1W) this will be the number of days divided
 * by 365.
 * For a monthly interval (e.g. 1M, 1Y, 2Y) this will be the number of months
 * divided by 12.
 *
 * For example, 1M would give the answer 1/12 and 1W would give the answer 7/365.
 */
extern double DateIntervalYears(DateInterval interval)
{
    CErrorHandler errorHandler;
    double years;

    if (JpmcdsDateIntervalToYears(&interval,&years) != SUCCESS)
        errorHandler();

    return years;
}

// helper functions for DateInterval
{
TDateInterval* DateIntervalCopy(const TDateInterval* ivl)
{
    if (!ivl)
        return NULL;

    CErrorHandler errorHandler;

    TDateInterval* copy = NEW(TDateInterval);
    if (!copy)
        errorHandler();

    *copy = *ivl;

    return copy;
}
}


/**
 * Adds a date interval to a given date.
 */
extern Date AddDateInterval(
    /** Start date. */
    Date startDate,
    /** Date interval to add. */
    DateInterval ivl,
    /** Number of intervals to add (default = 1) */
    int count=1)
{
    CErrorHandler errorHandler;

    TDate endDate;
    TDateInterval multi = ivl;
    multi.prd *= count;

    if (JpmcdsDtFwdAny(startDate, &multi, &endDate) != SUCCESS)
        errorHandler();

    return endDate;
}

typename struct _TDateList TDateList(isOpen=True freeFunc=JpmcdsFreeDateList);

class DateList<typename TDateList>
{
    property int numItems { return self->fNumItems; }
    public Date[] dates
    {
        if (self->fNumItems <= 0)
            return std::vector<TDate>();

        return std::vector<TDate>(self->fArray, self->fArray + self->fNumItems);
    }
}
{
    CErrorHandler errorHandler;

    TDateList* dl;
    if (dates.size() == 0)
        dl = JpmcdsNewEmptyDateList(0);
    else
        dl = JpmcdsNewDateListFromDates((TDate*)&dates[0], (int)dates.size());

    if (!dl)
        errorHandler();

    return dl;
}

extern DateList DateListMerge(
    DateList dateList1?,
    DateList dateList2?)
{
    CErrorHandler errorHandler;

    TDateList* dl;
    dl = JpmcdsMergeDateLists(dateList1, dateList2);
    if (!dl && (dateList1 || dateList2))
        errorHandler("DateListMerge");

    return dl;
}


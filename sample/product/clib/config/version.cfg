/* -*-c++-*- */

%module version;

#include <math.h>
#include <spi/Version.hpp>
#include <spi/StringUtil.hpp>
#include <spi_util/UserInfo.hpp>
#include <spi_util/FileUtil.hpp>

#include <spi/Function.hpp>

// functions are defined as extern, and the implementation follows
// the function declaration
//
// the implementation is written using the variables in the inner
// context
//
// each variable has an inner context and an outer context
// the outer context is what the client application will see
// the inner context is what the inner library understands
//
// the generated code is responsible for translating all the types
// that need translating before you get to the point where the
// code fragment is executed
//
// when debugging you should be able to put a break point in the
// code fragment in the configuration file

/**
 * Shows the version number as a string. You can request details of the build as well.
 */
extern string Version(
    /** Show build details as well as just the version number */
    bool showDetails=true)
{
    std::string versionString;
    if (showDetails)
    {
        versionString = spi::StringFormat(
            "CLIB version %s (%s). Built at %s %s",
            clib_version(),
#ifdef CLIB_DEBUG
            "Debug",
#else
            "Release",
#endif
            __TIME__, __DATE__);
    }
    else
    {
        versionString = clib_version();
    }
    return versionString;
}


// This is just for one file of the build, so for this to be accurate you 
// will need to have done a full re-build!
/**
 * Shows the timestamp of the build. 
 */
extern string Timestamp()
{
    std::string ts = spi::StringFormat("Built at %s %s", __TIME__, __DATE__);
    return ts;
}

extern string UserName()
{
    return spi_util::UserName();
}

extern string ComputerName()
{
    return spi_util::ComputerName();
}

extern string[] UserGroups(string serverName="", string userName="")
{
    return spi_util::UserGroups(serverName.c_str(), userName.c_str());
}

extern datetime FileTime(string filename)
{
    double fileTime = spi_util::FileLastUpdateTime(filename);
    return spi::DateTime(fileTime);
}

extern datetime Now() excelOptions="volatile"
{
    return spi::DateTime::Now();
}

extern double DateTimeDiff(datetime one, datetime two)
{
    spi::TimeDelta diff = one - two;
    return (double)diff;
}

//extern Object Function(
//    string name,
//    Variant v1?,
//    Variant v2?,
//    Variant v3?,
//    Variant v4?,
//    Variant v5?,
//    Variant v6?,
//    Variant v7?,
//    Variant v8?,
//    Variant v9?,
//    Variant v10?,
//    Variant v11?,
//    Variant v12?,
//    Variant v13?,
//    Variant v14?,
//    Variant v15?,
//    Variant v16?,
//    Variant v17?,
//    Variant v18?,
//    Variant v19?,
//    Variant v20?)
//    noLog = True
//{
//    // obviously this code doesn't belong here - this is an example
//    // to show that the function stuff works - it won't work in Python
//    spi::FunctionCaller* caller = clib_service()->get_function_caller(
//        name.c_str());
//
//    if (caller->nbArgs > 20)
//        SPI_THROW_RUNTIME_ERROR("Cannot create a function for " << name
//            << " which has more than 20 input parameters");
//
//    spi::Variant vs[20] = {v1, v2, v3, v4, v5, v6, v7, v8, v9, v10,
//        v11, v12, v13, v14, v15, v16, v17, v18, v19, v20};
//    
//    spi::InputValues iv(name.c_str());
//    const spi::InputContext* inputContext = NULL;
//    for (size_t i = 0; i < caller->nbArgs; ++i)
//    {
//        if (!inputContext)
//            inputContext = vs[i].GetInputContext();
//        iv.AddValue(caller->args[i], vs[i].GetValue());
//    }
//    if (iv.isPermuted())
//        SPI_THROW_RUNTIME_ERROR("Cannot create a function for " << name
//            << " with permuted inputs");
//
//    std::vector<spi::Value> inputs = iv.GetPermutation(
//        inputContext, caller, 0);
//
//    return spi::ObjectConstSP(new spi::Function(clib_service(),
//        caller, inputs));
//}
//
//extern Variant FunctionCall(Object func)
//{
//    const spi::Function* pf = dynamic_cast<const spi::Function*>(func.get());
//    if (!pf)
//        SPI_THROW_RUNTIME_ERROR("Input object of type " << 
//            func->get_class_name() << " is not a function");
//
//    spi::Value value = pf->call();
//    return spi::Variant(value);
//}

/* -*-c++-*- */

%module zcBuild;

#include <isda/convert.h>
#include <isda/date_sup.h>
#include <isda/tcurve.h>
#include <isda/interp.h>
#include <isda/gtozc.h>
#include <isda/macros.h>
#include <isda/zr2fwd.h>
#include <isda/zr2coup.h>
#include <isda-clib/zeroCurve.h>
#include "isdaErrorHandler.hpp"

#include "clib_zeroCurve.hpp" // needed for MMRate and SwapRate

extern ZeroCurve ZeroCurveCash(
    Date         baseDate,
    Date[]       dates,
    double[]     rates,
    DayCountConv dayCountConv,
    InterpType   interpType)
{
    SPI_PRE_CONDITION(dates.size() == rates.size());
    SPI_PRE_CONDITION(dates.size() > 0);

    CErrorHandler errorHandler;

    TCurve* stubCurve;
    stubCurve = JpmcdsNewTCurve(
        baseDate, 0, JPMCDS_ANNUAL_BASIS, JPMCDS_ACT_365F);
    if (!stubCurve)
        errorHandler();

    TCurve* tcCash = JpmcdsZCCash(
        stubCurve,
        (TDate*)&dates[0],
        (double*)&rates[0],
        (int)dates.size(),
        *dayCountConv);

    JpmcdsFreeTCurve(stubCurve);

    if (!tcCash)
        errorHandler();

    return ZeroCurveMake(tcCash, interpType);
}

/*
 * Builds a zero curve from swap rates assuming that we can use the swap
 * curve to discount the payments and that the floating leg values to par.
 */
extern ZeroCurve ZeroCurveSwaps(
    ZeroCurve    stubCurve,
    Date[]       swapDates,
    double[]     swapRates,
    DateInterval couponInterval,
    DayCountConv fixedDcc,
    BadDayConv   badDayConv,
    Holidays     holidays)
{
    PRE_CONDITION(swapDates.size() > 0);
    PRE_CONDITION(swapDates.size() == swapRates.size());

    CErrorHandler errorHandler;

    double freq;

    if (JpmcdsDateIntervalToFreq(&couponInterval,&freq) != SUCCESS)
        errorHandler();

    int fixedFreq = spi_util::IntegerCast<int>(freq);

    TCurve* tcSwaps = JpmcdsZCSwaps(
        stubCurve->tc,
        NULL,
        (TDate*)&swapDates[0],
        (double*)&swapRates[0],
        (int)swapDates.size(),
        fixedFreq,
        fixedFreq, // no discount curve so use fixedFreq
        *fixedDcc,
        *fixedDcc, // no discount curve so use fixedDcc
        '3', // fwdLength - probably ignored
        badDayConv,
        holidays);

    if (!tcSwaps)
        errorHandler();

    return ZeroCurveMake(tcSwaps, stubCurve->interpType);
}


enum CashOrSwap
{
    IGNORE
    "Ignore" "I" "",
    CASH
    "Cash" "C",
    SWAP
    "Swap" "S"
};


struct CashSwapCurve
{
    Date         baseDate;
    CashOrSwap[] cashOrSwaps;
    Date[]       dates;
    double[]     rates;
    DayCountConv cashDcc;
    DateInterval swapFixedInterval;
    DayCountConv swapFixedDcc;
    BadDayConv   badDayConv;
    Holidays     holidays;

    // test for function returning array of enum
    extern CashOrSwap[] CashOrSwaps()
    {
        return self->cashOrSwaps;
    }

    extern ZeroCurve ZeroCurve(InterpType interpType, string flags="") noConvert=True
    {
        return ZeroCurveCashSwaps(self->baseDate, self->cashOrSwaps, self->dates, self->rates,
            self->cashDcc, interpType, self->swapFixedInterval, self->swapFixedDcc,
            self->badDayConv, self->holidays, flags);
    }
};

/*
 * Builds a zero curve from cash and swap rates assuming that we can use the
 * swap curve to discount the payments and that the floating leg values to par.
 */
extern ZeroCurve ZeroCurveCashSwaps(
    Date         baseDate,
    CashOrSwap[] cashOrSwaps="",
    Date[]       dates?,
    double[]     rates=0,
    DayCountConv cashDcc,
    InterpType   interpType,
    DateInterval swapFixedInterval,
    DayCountConv swapFixedDcc,
    BadDayConv   badDayConv,
    Holidays     holidays,
    string       flags = "")
    noConvert=True
{
    // example of calling other functions from within this module
    // we do not need to add any extra include statements above
    PRE_CONDITION(cashOrSwaps.size() == dates.size());
    PRE_CONDITION(cashOrSwaps.size() == rates.size());

    std::vector<spi::Date> cashDates;
    std::vector<double>    cashRates;
    std::vector<spi::Date> swapDates;
    std::vector<double>    swapRates;

    size_t numPoints = cashOrSwaps.size();
    for (size_t i = 0; i < numPoints; ++i)
    {
        switch(cashOrSwaps[i])
        {
        case CashOrSwap::CASH:
            cashDates.push_back(dates[i]);
            cashRates.push_back(rates[i]);
            break;
        case CashOrSwap::SWAP:
            swapDates.push_back(dates[i]);
            swapRates.push_back(rates[i]);
            break;
        case CashOrSwap::IGNORE:
            break;
        default:
            THROW_RUNTIME_ERROR("Unsupported cashOrSwap type");
        }
    }
    
    ZeroCurveConstSP cashCurve = ZeroCurveCash(
        baseDate, cashDates, cashRates, cashDcc, interpType);

    ZeroCurveConstSP swapCurve = ZeroCurveSwaps(
        cashCurve, swapDates, swapRates, swapFixedInterval, swapFixedDcc,
        badDayConv, holidays);

    return swapCurve;
}

extern double MarketRate(
    ZeroCurve    zc,
    CashOrSwap   cashOrSwap,
    Date         startDate,
    Date         maturityDate,
    DayCountConv cashDcc,
    DateInterval swapFixedInterval,
    DayCountConv swapFixedDcc,
    BadDayConv   accBadDayConv,
    BadDayConv   payBadDayConv,
    Holidays     holidays,
    bool         stubAtEnd=false)

    noConvert=True
{
    // example of calling other functions from outside this module
    // we do need to add extra include statements above
    switch(cashOrSwap)
    {
    case CashOrSwap::CASH:
        return MMRate(zc, startDate, maturityDate, cashDcc);
    case CashOrSwap::SWAP:
        return SwapRate(zc, startDate, swapFixedInterval, maturityDate, 
            swapFixedDcc, accBadDayConv, payBadDayConv, holidays, stubAtEnd);
    default:
        THROW_RUNTIME_ERROR("Unsupported cashOrSwap type" <<
            cashOrSwap.to_string());
    }
}



